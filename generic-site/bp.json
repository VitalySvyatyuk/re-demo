{
  "commands": [
    {
      "templates": {
        "apache": {
          "main.vars.schema": "{\n  \"title\": \"Main web server config\", \n  \"required\": [\n    \"bp\", \n    \"co_profiles\"\n  ], \n  \"additionalProperties\": false, \n  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n  \"type\": \"object\", \n  \"properties\": {\n    \"co_profiles\": {\n      \"additionalProperties\": false, \n      \"required\": [\n        \"VERSION\", \n        \"REV_OPTIMIZATION_LEVEL\", \n        \"REV_CUSTOM_IMG_LEVEL\", \n        \"REV_CUSTOM_JS_LEVEL\", \n        \"REV_CUSTOM_CSS_LEVEL\"\n      ], \n      \"type\": \"object\", \n      \"properties\": {\n        \"REV_OPTIMIZATION_LEVEL\": {\n          \"pattern\": \"min|med|max|adaptive|custom|none\", \n          \"type\": \"string\"\n        }, \n        \"REV_CUSTOM_IMG_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }, \n        \"VERSION\": {\n          \"minimum\": 2, \n          \"type\": \"integer\", \n          \"maximum\": 2\n        }, \n        \"REV_CUSTOM_CSS_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }, \n        \"REV_CUSTOM_JS_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }\n      }, \n      \"title\": \"Optimization profile - Fewer requests\"\n    }, \n    \"bp\": {\n      \"additionalProperties\": false, \n      \"required\": [\n        \"VERSION\", \n        \"ssl\", \n        \"acl\", \n        \"SERVER_NAME\", \n        \"SERVER_ALIASES\", \n        \"SERVER_REGEX_ALIAS\", \n        \"ORIGIN_SERVER_NAME\", \n        \"ENABLE_VARNISH\", \n        \"REV_PROFILES_COUNT\", \n        \"ENABLE_HTTP\", \n        \"ENABLE_HTTPS\", \n        \"ENABLE_SPDY\", \n        \"REV_PROFILES_BASE_PORT_HTTP\", \n        \"REV_PROFILES_BASE_PORT_HTTPS\", \n        \"CONTENT_OPTIMIZERS_HTTP\", \n        \"CONTENT_OPTIMIZERS_HTTPS\", \n        \"DOMAINS_TO_PROXY_HTTP\", \n        \"DOMAINS_TO_PROXY_HTTPS\", \n        \"DOMAIN_SHARDS_COUNT\", \n        \"CUSTOM_WEBSERVER_CODE_BEFORE\", \n        \"CUSTOM_WEBSERVER_CODE_AFTER\", \n        \"BLOCK_CRAWLERS\", \n        \"ENABLE_JS_SUBSTITUTE\", \n        \"ENABLE_HTML_SUBSTITUTE\", \n        \"DEBUG_MODE\", \n        \"DOMAINS_TO_OPTIMIZE_HTTP\", \n        \"DOMAINS_TO_OPTIMIZE_HTTPS\", \n        \"BYPASS_VARNISH_LOCATIONS\", \n        \"PROXY_TIMEOUT\", \n        \"BYPASS_CO_LOCATIONS\", \n        \"ORIGIN_SERVERS_HTTP\", \n        \"ORIGIN_SERVERS_HTTPS\", \n        \"ORIGIN_IDLE_TIMEOUT\", \n        \"ORIGIN_REUSE_CONNS\", \n        \"ENABLE_VARNISH_GEOIP_HEADERS\", \n        \"ENABLE_PROXY_BUFFERING\", \n        \"END_USER_RESPONSE_HEADERS\"\n      ], \n      \"type\": \"object\", \n      \"properties\": {\n        \"REV_PROFILES_BASE_PORT_HTTP\": {\n          \"minimum\": 0, \n          \"type\": \"integer\", \n          \"maximum\": 65000\n        }, \n        \"ENABLE_HTML_SUBSTITUTE\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAINS_TO_OPTIMIZE_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"BYPASS_CO_LOCATIONS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"PROXY_TIMEOUT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"ENABLE_HTTPS\": {\n          \"type\": \"boolean\"\n        }, \n        \"ORIGIN_REUSE_CONNS\": {\n          \"type\": \"boolean\"\n        }, \n        \"REV_PROFILES_BASE_PORT_HTTPS\": {\n          \"minimum\": 0, \n          \"type\": \"integer\", \n          \"maximum\": 65000\n        }, \n        \"BLOCK_CRAWLERS\": {\n          \"type\": \"boolean\"\n        }, \n        \"ENABLE_SPDY\": {\n          \"type\": \"boolean\"\n        }, \n        \"SECURITY_MODE\": {\n          \"pattern\": \"off|on|block|detect\", \n          \"type\": \"string\"\n        }, \n        \"SERVER_NAME\": {\n          \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$\", \n          \"type\": \"string\"\n        }, \n        \"CUSTOM_WEBSERVER_CODE_AFTER\": {\n          \"type\": \"string\"\n        }, \n        \"SERVER_REGEX_ALIAS\": {\n          \"type\": \"string\"\n        }, \n        \"REV_PROFILES_COUNT\": {\n          \"minimum\": 1, \n          \"type\": \"integer\", \n          \"maximum\": 4\n        }, \n        \"CONTENT_OPTIMIZERS_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"DOMAINS_TO_PROXY_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"END_USER_RESPONSE_HEADERS\": {\n          \"items\": {\n            \"type\": \"object\", \n            \"properties\": {\n              \"header_value\": {\n                \"type\": \"string\"\n              }, \n              \"operation\": {\n                \"type\": \"string\"\n              }, \n              \"header_name\": {\n                \"type\": \"string\"\n              }\n            }\n          }, \n          \"type\": \"array\"\n        }, \n        \"BYPASS_VARNISH_LOCATIONS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"ssl\": {\n          \"additionalProperties\": false, \n          \"type\": \"object\", \n          \"properties\": {}, \n          \"title\": \"SSL setup\"\n        }, \n        \"CONTENT_OPTIMIZERS_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"VERSION\": {\n          \"minimum\": 23, \n          \"type\": \"integer\", \n          \"maximum\": 23\n        }, \n        \"ORIGIN_SERVER_NAME\": {\n          \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$\", \n          \"type\": \"string\"\n        }, \n        \"ENABLE_JS_SUBSTITUTE\": {\n          \"type\": \"boolean\"\n        }, \n        \"SERVER_ALIASES\": {\n          \"items\": {\n            \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$\", \n            \"type\": \"string\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"ENABLE_VARNISH\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAINS_TO_OPTIMIZE_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"ORIGIN_IDLE_TIMEOUT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"ENABLE_PROXY_BUFFERING\": {\n          \"type\": \"boolean\"\n        }, \n        \"ENABLE_HTTP\": {\n          \"type\": \"boolean\"\n        }, \n        \"CUSTOM_WEBSERVER_CODE_BEFORE\": {\n          \"type\": \"string\"\n        }, \n        \"ORIGIN_SERVERS_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"ENABLE_VARNISH_GEOIP_HEADERS\": {\n          \"type\": \"boolean\"\n        }, \n        \"acl\": {\n          \"additionalProperties\": true, \n          \"required\": [\n            \"enabled\", \n            \"action\", \n            \"acl_rules\"\n          ], \n          \"type\": \"object\", \n          \"properties\": {\n            \"action\": {\n              \"oneOf\": [\n                {\n                  \"pattern\": \"allow_except\"\n                }, \n                {\n                  \"pattern\": \"deny_except\"\n                }\n              ], \n              \"type\": \"string\"\n            }, \n            \"enabled\": {\n              \"type\": \"boolean\"\n            }, \n            \"acl_rules\": {\n              \"items\": {\n                \"additionalProperties\": true, \n                \"required\": [\n                  \"host_name\", \n                  \"subnet_mask\", \n                  \"country_code\", \n                  \"header_name\", \n                  \"header_value\"\n                ], \n                \"type\": \"object\", \n                \"properties\": {\n                  \"subnet_mask\": {\n                    \"pattern\": \"^(([0-9]{1,2})|([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}))?$\", \n                    \"type\": \"string\"\n                  }, \n                  \"header_name\": {\n                    \"type\": \"string\"\n                  }, \n                  \"host_name\": {\n                    \"pattern\": \"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9]))*)?$\", \n                    \"type\": \"string\"\n                  }, \n                  \"country_code\": {\n                    \"pattern\": \"^([A-Z][A-Z])?$\", \n                    \"type\": \"string\"\n                  }, \n                  \"header_value\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }, \n              \"type\": \"array\"\n            }\n          }, \n          \"title\": \"Browser Proxy Access Control Lists\"\n        }, \n        \"DEBUG_MODE\": {\n          \"type\": \"boolean\"\n        }, \n        \"ORIGIN_SERVERS_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"DOMAIN_SHARDS_COUNT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"DOMAINS_TO_PROXY_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }\n      }, \n      \"title\": \"Browser Proxy config\"\n    }\n  }\n}", 
          "common/loop_detect.jinja": "{% macro loop_detect(this) %}\n{%      set header_name = \"X-Rev-Nodes\" %}\n{%      set node_name = HOSTNAME_SHORT %}\n    # If we've already visited this server during this request, in the same role (BP or CO),\n    # return an error page and status 508 (loop detected).\n    RewriteEngine On\n    RewriteCond %{HTTP:{{header_name}}} {{node_name}}\n    RewriteRule ^(.*)$ - [R=508,L]\n    ErrorDocument 508 \"A redirection loop was detected on '{{node_name}}'. Please review the server configuration.\"\n    # Add this host to the request list of visited nodes\n    RequestHeader append {{header_name}} {{node_name}}\n{%      if this.DEBUG_MODE %}\n    # Add this host to the response list of visited nodes\n    Header append {{header_name}} {{node_name}}\n{%      endif %}\n{% endmacro %}{# loop_detect #}\n", 
          "co/standard_profiles/default_customer_profiles.jinja": "{% macro _base_filters(this) -%}\n    # Begin base filters\n    ModPagespeedEnableFilters add_head\n    ModPagespeedEnableFilters inline_import_to_link\n    ModPagespeedEnableFilters insert_ga\n    ModPagespeedEnableFilters remove_comments\n    ModPagespeedEnableFilters collapse_whitespace\n    ModPagespeedEnableFilters extend_cache\n    ModPagespeedEnableFilters extend_cache_pdfs\n    ModPagespeedEnableFilters remove_quotes\n    # We already use Boomerang, don't need this\n    #ModPagespeedEnableFilters add_instrumentation\n    ModPagespeedEnableFilters convert_meta_tags\n    ModPagespeedEnableFilters insert_dns_prefetch\n\n    # Allow AJAX loaded resources to be optimized\n    # See: https://developers.google.com/speed/pagespeed/module/system#ipro\n    ModPagespeedInPlaceResourceOptimization on\n\n    # Filters to lower bandwidth usage\n    ModPagespeedEnableFilters combine_heads\n    ModPagespeedEnableFilters elide_attributes\n    ModPagespeedEnableFilters trim_urls\n    # End base filters\n{%- endmacro %}\n\n{% macro profile_selection(this) -%}\n{% if this.REV_OPTIMIZATION_LEVEL == \"adaptive\" -%}\n    # TODO: implement\n{% endif %}\n    # Always use profile 0 by default\n    RevProfilesAddSelectionRule 0 1==1\n{%- endmacro %}\n\n{% macro _optimize_up_to_level(level) -%}\n{% if level == \"low\" %}\n{% set lvl = 1 %}\n{% elif level == \"medium\" %}\n{% set lvl = 2 %}\n{% elif level == \"high\" %}\n{% set lvl = 3 %}\n{% else %}\n{% set lvl = 0 %}\n{% endif %}\n{% if lvl >= 1 %}\n{{ caller(\"low\") }}\n{% endif %}\n{% if lvl >= 2 %}\n{{ caller(\"medium\") }}\n{% endif %}\n{% if lvl == 3 %}\n{{ caller(\"high\") }}\n{% endif %}\n{%- endmacro %}\n\n{% macro _custom_js_optimizations(js_level) -%}\n{% call(level) _optimize_up_to_level(js_level) %}\n{% if level == \"low\" -%}\n    # Begin custom JS optimizations - low\n# See this bug: https://code.google.com/p/modpagespeed/issues/detail?id=821\n#<ModPagespeedIf spdy>\n#    ModPagespeedEnableFilters outline_javascript\n#</ModPagespeedIf>\n    # End custom JS optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom JS optimizations - medium\n    ModPagespeedEnableFilters extend_cache_scripts\n    ModPagespeedEnableFilters rewrite_javascript\n    #ModPagespeedUseExperimentalJsMinifier On\n<ModPagespeedIf !spdy>\n    ModPagespeedEnableFilters inline_javascript\n</ModPagespeedIf>\n    # End custom JS optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom JS optimizations - high\n    ModPagespeedEnableFilters defer_javascript\n    ModPagespeedEnableFilters combine_javascript\n    # Don't let PageSpeed externalize JS - all JS files must pass through the BP\n    #ModPagespeedEnableFilters canonicalize_javascript_libraries\n    ModPagespeedEnableFilters make_google_analytics_async\n    # End custom JS optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_css_optimizations(css_level) -%}\n{% call(level) _optimize_up_to_level(css_level) %}\n{% if level == \"low\" -%}\n    # Begin custom CSS optimizations - low\n    ModPagespeedEnableFilters move_css_above_scripts\n    ModPagespeedEnableFilters move_css_to_head\n# See this bug: https://code.google.com/p/modpagespeed/issues/detail?id=821\n#<ModPagespeedIf spdy>\n#    ModPagespeedEnableFilters outline_css\n#</ModPagespeedIf>\n    ModPagespeedEnableFilters rewrite_style_attributes\n    # End custom CSS optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom CSS optimizations - medium\n    ModPagespeedEnableFilters extend_cache_css\n    ModPagespeedEnableFilters combine_css\n<ModPagespeedIf !spdy>\n    ModPagespeedEnableFilters inline_css\n</ModPagespeedIf>\n    ModPagespeedEnableFilters flatten_css_imports\n    ModPagespeedEnableFilters rewrite_css\n    ModPagespeedEnableFilters fallback_rewrite_css_urls\n    ModPagespeedEnableFilters rewrite_style_attributes_with_url\n    # End custom CSS optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom CSS optimizations - high\n<ModPagespeedIf !spdy>\n    ModPagespeedEnableFilters inline_google_font_css\n</ModPagespeedIf>\n    ModPagespeedEnableFilters prioritize_critical_css\n    # End custom CSS optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_img_optimizations(img_level) -%}\n{% call(level) _optimize_up_to_level(img_level) %}\n{% if level == \"low\" -%}\n    # Begin custom IMG optimizations - low\n    ModPagespeedEnableFilters insert_image_dimensions\n    ModPagespeedEnableFilters dedup_inlined_images\n    # End custom IMG optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom IMG optimizations - medium\n    ModPagespeedEnableFilters sprite_images\n    ModPagespeedEnableFilters extend_cache_images\n    ModPagespeedEnableFilters rewrite_images\n    #ModPagespeedEnableFilters convert_jpeg_to_progressive\n<ModPagespeedIf !spdy>\n    ModPagespeedEnableFilters inline_images\n</ModPagespeedIf>\n    ModPagespeedEnableFilters recompress_images\n    ModPagespeedEnableFilters recompress_jpeg\n    ModPagespeedEnableFilters recompress_png\n    ModPagespeedEnableFilters recompress_webp\n    ModPagespeedEnableFilters convert_gif_to_png\n    ModPagespeedEnableFilters strip_image_color_profile\n    ModPagespeedEnableFilters strip_image_meta_data\n    ModPagespeedEnableFilters resize_images\n    ModPagespeedEnableFilters resize_rendered_image_dimensions\n    ModPagespeedEnableFilters lazyload_images\n    ModPagespeedCriticalImagesBeaconEnabled Off\n\n    ModPagespeedImageRecompressionQuality 70\n    # End custom IMG optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom IMG optimizations - high\n    ModPagespeedEnableFilters convert_png_to_jpeg\n    # webp conversion is costly and not all browsers support webp\n    #ModPagespeedEnableFilters convert_jpeg_to_webp\n    #ModPagespeedEnableFilters inline_preview_images\n    ModPagespeedEnableFilters resize_mobile_images\n    # End custom IMG optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_optimizations(this) -%}\n    # Optimization level: Custom\n    {{_custom_js_optimizations(this.REV_CUSTOM_JS_LEVEL)}}\n    {{_custom_css_optimizations(this.REV_CUSTOM_CSS_LEVEL)}}\n    {{_custom_img_optimizations(this.REV_CUSTOM_IMG_LEVEL)}}\n    # End optimization level: Custom\n{%- endmacro %}\n\n{% macro _level_optimizations(level) -%}\n    # Optimization level: {{level}}\n    {{_custom_js_optimizations(level)}}\n    {{_custom_css_optimizations(level)}}\n    {{_custom_img_optimizations(level)}}\n    # End optimization level: {{level}}\n{%- endmacro %}\n\n{% macro profile0(this) -%}\n    {{_base_filters()}}\n{% if this.REV_OPTIMIZATION_LEVEL == \"min\" %}\n    {{_level_optimizations(\"low\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"med\" %}\n    {{_level_optimizations(\"medium\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"max\" %}\n    {{_level_optimizations(\"high\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"custom\" %}\n    {{_custom_optimizations(this)}}\n{% else %}{# including \"adaptive\", where profile0 means \"don't optimize\" #}\n    # Optimizations turned off\n{% endif %}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile1(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"low\")}}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile2(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"medium\")}}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile3(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"high\")}}\n    # End optimizations\n{%- endmacro %}\n", 
          "common/ssl.jinja": "{% set ssl_ciphers = \"\\\"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA 3DES RC4 !aNULL !eNULL !LOW !MD5 !EXP !PSK !SRP !DSS +3DES 3DES +RC4 RC4\\\"\" %}\n\n{% macro _do_setup_no_proxy(this, cert_dir) %}\n    SSLEngine On\n    # Disable SSLv2/3 because of SNI, which requires TLS\n    SSLProtocol All -SSLv2 -SSLv3\n    # Mitigate CRIME attack\n    SSLCompression off\n    # Use stronger ciphers, which may mitigate BEAST attacks\n    SSLHonorCipherOrder on\n    SSLCipherSuite {{ssl_ciphers}}\n    SSLCACertificateFile {{cert_dir}}/ca-bundle.crt\n    SSLCertificateFile {{cert_dir}}/server.crt\n    SSLCertificateKeyFile {{cert_dir}}/server.key\n{%- endmacro %}\n\n{% macro _do_setup_proxy_only(this) %}\n    SSLProxyEngine On\n    # Disable SSLv2/3 because of SNI, which requires TLS\n    SSLProxyProtocol All -SSLv2 -SSLv3\n    SSLProxyCipherSuite {{ssl_ciphers}}\n    SSLProxyCheckPeerName Off\n    SSLProxyCheckPeerCN Off\n{%- endmacro %}\n\n{% macro setup_no_proxy(this) %}\n    # Begin SSL setup (no proxy)\n{{  _do_setup_no_proxy(this, \"/opt/revsw-config/apache/\" + GLOBAL_SITE_NAME + \"/certs\") }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup_proxy_only(this) %}\n    # Begin SSL setup (proxy-only)\n{{  _do_setup_proxy_only(this) }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup(this) %}\n    # Begin SSL setup\n{{  _do_setup_no_proxy(this, \"/opt/revsw-config/apache/\" + GLOBAL_SITE_NAME + \"/certs\") }}\n{{  _do_setup_proxy_only(this) }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup_bp_co(this) %}\n    # Begin SSL setup\n{{  _do_setup_no_proxy(this, \"/opt/revsw-config/apache/co-certs\") }}\n{{  _do_setup_proxy_only(this) }}\n    # End SSL setup\n{%- endmacro %}\n", 
          "main.jinja": "\n{% import \"co/standard_profiles/default_customer_profiles.jinja\" as co_profiles_mod %}\n{% import \"bp/bp.jinja\" as bp_mod %}\n\n{% call(before) bp_mod.setup(bp, co_profiles_mod, co_profiles) %}\n{% endcall %}\n", 
          "bp/bp.jinja": "{% import \"common/ssl.jinja\" as ssl_mod %}\n{% import \"common/third_party.jinja\" as third_party_mod %}\n{% import \"common/loop_detect.jinja\" as loop_detect_mod %}\n\n# Brunko: test\n{% macro _common_profiles_and_security(this, co_profiles_mod, co_profiles) %}\n    # Start rules from scratch\n    RevProfilesFlushSelectionRules\n\n    # Run customized profile selection algo\n{{  co_profiles_mod.profile_selection(co_profiles) }}\n\n    # Security setup\n{%  if this.SECURITY_MODE == \"on\" %}\n    SecRuleEngine On\n{%  elif this.SECURITY_MODE == \"detect\" %}\n    SecRuleEngine DetectionOnly\n{%  else %}\n    SecRuleEngine Off\n{%  endif %}\n    SecAuditLogStorageDir /var/cache/modsecurity/audit/{{this.SERVER_NAME}}/\n    SecAuditLog \"/var/cache/modsecurity/audit/{{this.SERVER_NAME}}.index\"\n    SecAuditLogType Concurrent\n\n{%  set geoip_enabled = this.ENABLE_VARNISH_GEOIP_HEADERS %}\n{%  if this.acl.enabled %}\n    # Begin ACLs\n{%      if this.acl.acl_rules %}\n{%          if this.acl.action == \"allow_except\" %}\n{%              set outer_directive = \"RequireAll\" %}\n{%              set inner_directive = \"RequireNone\" %}\n{%          else %}{# deny all #}\n{%              set outer_directive = \"RequireAny\" %}\n{%              set inner_directive = \"RequireAny\" %}\n{%          endif %}{# allow all #}\n{%          set countries = this.acl.acl_rules|selectattr(\"country_code\")|list %}\n{%          if countries|length %}{# use GeoIP #}\n{%              set geoip_enabled = True %}\n    SetEnvIf MM_COUNTRY_CODE ^({{ countries|map(attribute=\"country_code\")|join(\"|\") }}) IsAclCountry\n{%          endif %}{# use GeoIP #}\n\n    <Location / >\n        <{{outer_directive}}>\n            Require all {{ \"granted\" if this.acl.action == \"allow_except\" else \"denied\" }}\n            <{{inner_directive}}>\n{%          for rule in this.acl.acl_rules %}\n{%              if rule.host_name|is_ipv4 %}\n                Require ip {{rule.host_name}}{{ \"/\" + rule.subnet_mask if rule.subnet_mask else \"\" }}\n{%              elif rule.host_name %}\n                Require host {{rule.host_name}}\n{%              endif %}\n{%              if rule.header_name %}\n                Require expr %{HTTP:{{rule.header_name}}} == \"{{rule.header_value}}\"\n{%              endif %}\n{%          endfor %}{# rule in this.acl.acl_rules #}\n{%          if countries|length %}{# use GeoIP #}\n                Require env IsAclCountry\n{%          endif %}\n            </{{inner_directive}}>\n        </{{outer_directive}}>\n    </Location>\n{%      elif this.acl.action == \"deny_except\" %}{# not this.acl.acl_rules #}\n    <Location / >\n        Require all denied\n    </Location>\n{%      endif %}{# this.acl.acl_rules #}\n    # End ACLs\n{%  endif %}{# this.acl.enabled #}\n\n{%  if geoip_enabled %}\n    # GeoIP setup\n    MaxMindDBEnable On\n    MaxMindDBFile MM_CITY_DB /opt/revsw-config/apache/GeoLite2-City.mmdb\n    MaxMindDBEnv MM_COUNTRY_CODE MM_CITY_DB/country/iso_code\n\n{%      if this.ENABLE_VARNISH_GEOIP_HEADERS %}\n    MaxMindDBEnv MM_COUNTRY_NAME MM_CITY_DB/country/names/en\n    MaxMindDBEnv MM_CONTINENT_CODE MM_CITY_DB/continent/code\n    MaxMindDBEnv MM_CITY_NAME MM_CITY_DB/city/names/en\n    MaxMindDBEnv MM_LONGITUDE MM_CITY_DB/location/longitude\n    MaxMindDBEnv MM_LATITUDE MM_CITY_DB/location/latitude\n    RequestHeader set X-Rev-ContinentCode \"%{MM_CONTINENT_CODE}e\"\n    RequestHeader set X-Rev-CountryCode \"%{MM_COUNTRY_CODE}e\"\n    RequestHeader set X-Rev-CountryName \"%{MM_COUNTRY_NAME}e\"\n    RequestHeader set X-Rev-CityName \"%{MM_CITY_NAME}e\"\n    RequestHeader set X-Rev-Longitude \"%{MM_LONGITUDE}e\"\n    RequestHeader set X-Rev-Latitude \"%{MM_LATITUDE}e\"\n    RequestHeader set X-Rev-Node \"{{HOSTNAME_SHORT}}\"\n{%      endif %}{# this.ENABLE_VARNISH_GEOIP_HEADERS #}\n{%      if this.DEBUG_MODE %}\n    Header set X-Rev-CountryCode \"%{MM_COUNTRY_CODE}e\"\n    Header set X-Rev-CountryName \"%{MM_COUNTRY_NAME}e\"\n    Header set X-Rev-CityName \"%{MM_CITY_NAME}e\"\n    Header set X-Rev-Latitude \"%{MM_LONGITUDE}e\"\n    Header set X-Rev-Longitude \"%{MM_LATITUDE}e\"\n    Header set X-Rev-Node \"{{HOSTNAME_SHORT}}\"\n{%      endif %}\n    # End GeoIP setup\n{%  endif %}{# geoip_enabled #}\n{%- endmacro %}\n\n{% macro _common_sharding(this) %}\n{%  for shard in range(this.DOMAIN_SHARDS_COUNT) %}\n    # Sharding alias\n    ServerAlias s{{shard}}-{{this.SERVER_NAME}}\n{%  endfor %}\n{%- endmacro %}\n\n{% macro _common_static_servers(this, servers, extra_servers, proto) %}\n{%  for host in (servers|list + extra_servers|list)|flatten_to_set %}\n{%      set url = proto + \"://\" + host %}\n    <Location /rev-third-party-{{proto}}/{{host}}>\n        ProxyPreserveHost Off\n        RevProfilesMode Off\n        ProxyPass {{url}} retry=0\n\n{%      if this.ENABLE_HTML_SUBSTITUTE %}\n        FilterDeclare decompress CONTENT_SET\n        FilterProvider decompress INFLATE \"%{CONTENT_TYPE} =~ m|^text/html| && %{REQUEST_METHOD} != 'HEAD'\"\n\n        FilterDeclare compress CONTENT_SET\n        FilterProvider compress DEFLATE \"%{CONTENT_TYPE} =~ m|^text/html| && %{REQUEST_METHOD} != 'HEAD'\"\n\n        FilterDeclare replace CONTENT_SET\n        FilterProvider replace SUBSTITUTE \"%{CONTENT_TYPE} =~ m|^text/html| && %{REQUEST_METHOD} != 'HEAD'\"\n\n        FilterChain =decompress replace compress\n\n        # Make sure absolute URLs pointing to the origin go through us instead\n        Substitute \"s|([\\\"'])(https?:)?//{{this.ORIGIN_SERVER_NAME}}|$1|q\"\n\n{{          third_party_mod.replace_urls(this, proto, False)|indent }}\n{%      endif %}\n    </Location>\n    ProxyPassReverse /rev-third-party-{{proto}}/{{host}} {{url}}\n{%  endfor %}\n{%- endmacro %}{# _common_static_servers #}\n\n{% macro _common_co_balancer_config(this, balancer_name, routeid_suffix, profiles_base_port, content_optimizers) %}\n    # mod_proxy and mod_proxy_balancer\n    # Balancer members are reused immediately even if they have errors (retry=0),\n    # to allow for DNS-based HA.\n    # We try to maintain a connection to them for as long as possible (keepalive=On).\n{%  set proxy_params = \"retry=0 ttl=250\" %}\n{%  if content_optimizers|list|length == 1 %}\n{%      set co_base_url = content_optimizers[0] %}\n{%      set caller_params = proxy_params %}\n{%  else %}\n{%      set co_base_url = \"balancer://\" + balancer_name %}\n{%      set caller_params = \"\" %}\n    Header add Set-Cookie \"ROUTEID{{routeid_suffix}}=.%{BALANCER_WORKER_ROUTE}e; path=/\" env=BALANCER_ROUTE_CHANGED\n    <Proxy balancer://{{balancer_name}}>\n{%      set route_no = 1 %}\n{%      for co in content_optimizers %}\n        BalancerMember {{co}} route={{route_no}} keepalive=On {{proxy_params}}\n{%          set route_no = route_no + 1 %}\n{%      endfor %}\n        ProxySet stickysession=ROUTEID{{routeid_suffix}}\n    </Proxy>\n{%  endif %}\n\n    # Wait at most for configured seconds for a reply from CO, then return error message.\n    # This will make recovery from CO failure quicker.\n    # The DNS monitor will assign another CO to the same domain name.\n    ProxyTimeout {{this.PROXY_TIMEOUT}}\n\n    # mod_rev_profile_selection\n    ProxyConnPoolCount {{this.REV_PROFILES_COUNT}}\n    RevProfilesBasePort {{profiles_base_port}}\n{{  caller(co_base_url, caller_params) }}\n{%- endmacro %}{# _common_co_balancer_config #}\n\n{% macro _common_proxy_config_step1(this, co_profiles_mod, co_profiles, varnish_port, profiles_base_port, content_optimizers) %}\n    ServerName {{this.SERVER_NAME}}\n{{  _common_sharding(this) }}\n\n{%  if this.DEBUG_MODE %}\n    LogLevel trace6\n{%  endif %}\n\n{{  loop_detect_mod.loop_detect(this) }}\n\n    # mod_status (debug)\n    <Location /rev-status>\n        SetHandler server-status\n        Require local\n    </Location>\n    # Don't pass /rev-status through proxy\n    ProxyPass /rev-status !\n\n    # Never disable the Varnish backend, even if it has temporary problems.\n    ProxyPass / http://127.0.0.1:{{varnish_port}}/ retry=0\n    ProxyPassReverse / http://127.0.0.1:{{varnish_port}}/\n    ProxyPreserveHost On\n\n    # mod_rev_profile_selection\n    RevProfilesMode varnish_step1\n\n{{  _common_profiles_and_security(this, co_profiles_mod, co_profiles) }}\n\n{%  if this.BYPASS_VARNISH_LOCATIONS %}\n    # Bypass Varnish for certain URLs\n\n    # First set up CO balancer\n{%      call (co_base_url, proxy_params) _common_co_balancer_config(this, \"bp_cos_bypass\", \"B\", profiles_base_port, content_optimizers) %}\n{%          for url in this.BYPASS_VARNISH_LOCATIONS %}\n{%              set rel_url = url if url[0] != \"/\" else url[1:] %}\n    <Location /{{rel_url}}>\n        ProxyPass {{co_base_url}}/{{rel_url}} {{proxy_params}}\n        ProxyPassReverse {{co_base_url}}/{{rel_url}}\n        ProxyPreserveHost On\n        RevProfilesMode full\n    </Location>\n    ProxyPass /{{rel_url}} !\n{%          endfor %}\n{%      endcall %}\n    # End Varnish bypass\n{%  endif %}{# this.BYPASS_VARNISH_LOCATIONS #}\n{% endmacro %}{# _common_proxy_config_step1 #}\n\n{% macro _common_proxy_config_step2(this, co_profiles_mod, co_profiles, profiles_base_port, content_optimizers, is_https) %}\n    ServerName {{this.SERVER_NAME}}\n\n{%  if this.DEBUG_MODE %}\n    LogLevel trace6\n{%  endif %}\n\n{%  if not this.ENABLE_VARNISH %}\n{{      _common_sharding(this) }}\n{{      loop_detect_mod.loop_detect(this) }}\n{%  endif %}\n\n    # mod_status (debug)\n    <Location /rev-status>\n        SetHandler server-status\n        Require local\n    </Location>\n    # Don't pass /rev-status through proxy\n    ProxyPass /rev-status !\n\n{%  if this.BLOCK_CRAWLERS %}\n    # Don't allow creepy crawlers (Googlebot etc) on our site\n    Alias /robots.txt /var/www/robots.txt\n    ProxyPass /robots.txt !\n{%  endif %}\n\n    <Location /rev-diablo>\n        ProxyPreserveHost Off\n        RevProfilesMode Off\n{%  if this.ENABLE_JS_SUBSTITUTE %}\n        RevJSSubstituteEnabled Off\n{%  endif %}\n        ProxyPass http://rev-js-source.revdn.net retry=0\n        ProxyPassReverse http://rev-js-source.revdn.net\n    </Location>\n\n{%  if this.ENABLE_JS_SUBSTITUTE %}\n    # Rev JS substitute and accompanying script\n    RevJSSubstituteEnabled On\n    Alias /rev-js /usr/share/revsw-libapache2-mod-rev-js-substitute\n    ProxyPass /rev-js !\n    <Directory /usr/share/revsw-libapache2-mod-rev-js-substitute>\n        RevJSSubstituteEnabled Off\n        Require all granted\n    </Directory>\n{%  endif %}{# ENABLE_JS_SUBSTITUTE #}\n\n{%  call (co_base_url, proxy_params) _common_co_balancer_config(this, \"bp_cos\", \"\", profiles_base_port, content_optimizers) %}\n    ProxyPass / {{co_base_url}}/ {{proxy_params}}\n    ProxyPassReverse / {{co_base_url}}/\n    ProxyPassReverse / http://{{this.SERVER_NAME}}/\n    ProxyPreserveHost On\n{%  endcall %}\n\n{%  if this.BYPASS_CO_LOCATIONS %}\n    # Bypass CO for certain URLs\n{%      set origins = this.ORIGIN_SERVERS_HTTPS if is_https else this.ORIGIN_SERVERS_HTTP %}\n{%      set proxy_params = \"keepalive=On\" + (\" ttl=\" + this.ORIGIN_IDLE_TIMEOUT|string if this.ORIGIN_IDLE_TIMEOUT and this.ORIGIN_REUSE_CONNS else \"\") + (\" disablereuse=On\" if not this.ORIGIN_REUSE_CONNS else \"\") %}\n{%      if origins|length > 1 %}\n    # First set up origin balancer\n    <Proxy balancer://bp_ows>\n{%          set route_no = 1 %}\n{%          for ows in origins %}\n        BalancerMember {{ows}} route={{route_no}} {{proxy_params}}\n{%              set route_no = route_no + 1 %}\n{%          endfor %}\n        ProxySet stickysession=ROUTEID\n    </Proxy>\n{%      endif %}\n\n{%      for url in this.BYPASS_CO_LOCATIONS %}\n{%          set rel_url = url if url[0] != \"/\" else url[1:] %}\n    <Location /{{rel_url}} >\n{%          if origins|length == 1 %}\n        ProxyPass {{origins[0]}}/{{rel_url}} retry=0 {{proxy_params}}\n        ProxyPassReverse {{origins[0]}}/{{rel_url}}\n{%          else %}{# origins|length != 1 #}\n        ProxyPass balancer://bp_ows/{{rel_url}}\n        ProxyPassReverse balancer://bp_ows/{{rel_url}}\n{%          endif %}{# origins|length #}\n        RevProfilesMode off\n        # Make sure the origin sees the right Host header\n        ProxyPreserveHost On\n        ProxySSLHostname {{this.ORIGIN_SERVER_NAME}}\n        RequestHeader set Host {{this.ORIGIN_SERVER_NAME}}\n    </Location>\n    ProxyPass /{{rel_url}} !\n{%      endfor %}{# url in this.BYPASS_CO_LOCATIONS #}\n    # End CO bypass\n{%  endif %}{# this.BYPASS_CO_LOCATIONS #}\n\n{%  if this.ENABLE_VARNISH %}\n    RevProfilesMode varnish_step2\n{%  else %}\n    RevProfilesMode full\n\n{{  _common_profiles_and_security(this, co_profiles_mod, co_profiles) }}\n{%  endif %}\n{%- endmacro %}{# _common_proxy_config_step2 #}\n\n{% macro _common_frontend(this) %}\n    # Optional user customizations in BP frontend\n{{  this.CUSTOM_WEBSERVER_CODE_BEFORE|extract_custom_webserver_code(\"APACHE\") }}\n    # End optional user customizations in BP frontend\n{%- endmacro %}{# _common_frontend #}\n\n{% macro setup(this, co_profiles_mod, co_profiles) %}\n\n{%  if this.SECURITY_MODE != \"block\" %}{# \"block\" means \"block site\", so we simply remove the site from Apache #}\n\n{%      if this.ENABLE_HTTP %}\n<VirtualHost *:80>\n{%          if this.ENABLE_VARNISH %}\n{{              _common_proxy_config_step1(this, co_profiles_mod, co_profiles, 8080, this.REV_PROFILES_BASE_PORT_HTTP, this.CONTENT_OPTIMIZERS_HTTP) }}\n{{              _common_frontend(this) }}\n</VirtualHost>\n\n<VirtualHost 127.0.0.1:9080>\n    # Don't log accesses on this vhost; they all come from localhost\n    CustomLog /dev/null revsw\n\n    # Make sure the connections between Varnish and BP are kept alive for 10 minutes\n    KeepAliveTimeout 600\n\n    # Don't add X-Forwarded-For in this step, it's already added in step1\n    ProxyAddHeaders Off\n{%          else %}{# not this.ENABLE_VARNISH #}\n{{              _common_frontend(this) }}\n{%          endif %}{# this.ENABLE_VARNISH #}\n\n{%          if this.DOMAINS_TO_PROXY_HTTPS %}\n    # Must enable SSL proxy support for HTTPS static content servers\n{{              ssl_mod.setup_proxy_only(this.ssl) }}\n{%          endif %}\n\n    # Optional customizations before generic BP config\n{{          caller(True) }}\n    # End optional customizations before generic BP config\n\n{% set extra_domains_http = this.DOMAINS_TO_OPTIMIZE_HTTP if this.ENABLE_JS_SUBSTITUTE else [] %}\n{% set extra_domains_https = this.DOMAINS_TO_OPTIMIZE_HTTPS if this.ENABLE_JS_SUBSTITUTE else [] %}\n\n    # HTTP static content servers\n{{          _common_static_servers(this, this.DOMAINS_TO_PROXY_HTTP, extra_domains_http, \"http\") }}\n\n{%          if not this.ENABLE_HTTPS %}\n    # HTTPS static content servers\n{{              _common_static_servers(this, this.DOMAINS_TO_PROXY_HTTPS, extra_domains_https, \"https\") }}\n{%          endif %}\n\n{{          _common_proxy_config_step2(this, co_profiles_mod, co_profiles, this.REV_PROFILES_BASE_PORT_HTTP, this.CONTENT_OPTIMIZERS_HTTP, false) }}\n\n    # Optional customizations after generic BP config\n{{          caller(False) }}\n{{          this.CUSTOM_WEBSERVER_CODE_AFTER|extract_custom_webserver_code(\"APACHE\") }}\n    # End optional customizations after generic BP config\n</VirtualHost>\n{%      endif %}{# this.ENABLE_HTTP #}\n\n{%      if this.ENABLE_HTTPS %}\n<VirtualHost *:443>\n{%          if this.ENABLE_VARNISH and not this.BYPASS_VARNISH_LOCATIONS %}\n{{              ssl_mod.setup_no_proxy(this.ssl) }}\n{%          else %}{# If this.BYPASS_VARNISH_LOCATIONS is true, we need SSL proxy support for direct connections to CO #}\n{{              ssl_mod.setup(this.ssl) }}\n{%          endif %}\n\n    # OCSP stapling is only enabled on the BP\n    SSLUseStapling on\n    SSLStaplingResponderTimeout 5\n    SSLStaplingReturnResponderErrors off\n\n    # mod_spdy\n    SpdyEnabled {{ \"On\" if this.ENABLE_SPDY else \"Off\" }}\n\n{%          if this.ENABLE_VARNISH %}\n{{              _common_proxy_config_step1(this, co_profiles_mod, co_profiles, 8443, this.REV_PROFILES_BASE_PORT_HTTPS, this.CONTENT_OPTIMIZERS_HTTPS) }}\n{{              _common_frontend(this) }}\n</VirtualHost>\n\n<VirtualHost 127.0.0.1:9443>\n{{              ssl_mod.setup_proxy_only(this.ssl) }}\n\n    # Don't log accesses on this vhost; they all come from localhost\n    CustomLog /dev/null revsw\n\n    # Make sure the connections between Varnish and BP are kept alive for 10 minutes\n    KeepAliveTimeout 600\n\n    # Don't add X-Forwarded-For in this step, it's already added in step1\n    ProxyAddHeaders Off\n{%          else %}{# not this.ENABLE_VARNISH #}\n{{              _common_frontend(this) }}\n{%          endif %}{# this.ENABLE_VARNISH #}\n    # Optional customizations before generic BP config\n{{          caller(True) }}\n    # End optional customizations before generic BP config\n\n{%          set extra_domains_http = this.DOMAINS_TO_OPTIMIZE_HTTP if this.ENABLE_JS_SUBSTITUTE else [] %}\n{%          set extra_domains_https = this.DOMAINS_TO_OPTIMIZE_HTTPS if this.ENABLE_JS_SUBSTITUTE else [] %}\n\n    # HTTP static content servers\n{{          _common_static_servers(this, this.DOMAINS_TO_PROXY_HTTP, extra_domains_http, \"http\") }}\n\n    # HTTPS static content servers\n{{          _common_static_servers(this, this.DOMAINS_TO_PROXY_HTTPS, extra_domains_https, \"https\") }}\n\n{{          _common_proxy_config_step2(this, co_profiles_mod, co_profiles, this.REV_PROFILES_BASE_PORT_HTTPS, this.CONTENT_OPTIMIZERS_HTTPS, true) }}\n\n    # mod_pagespeed in CO looks at this header when optimizing for SPDY\n    RequestHeader add X-PSA-Optimize-For-SPDY On\n\n    # Optional customizations after generic BP config\n{{          caller(False) }}\n{{          this.CUSTOM_WEBSERVER_CODE_AFTER|extract_custom_webserver_code(\"APACHE\") }}\n    # End optional customizations after generic BP config\n</VirtualHost>\n{%      endif %}{# this.ENABLE_HTTPS #}\n\n{%  else %}{# this.SECURITY_MODE == \"block\", which means \"block access for everybody\" #}\n\n{%      if this.ENABLE_HTTP %}\n<VirtualHost *:80>\n    ServerName {{this.SERVER_NAME}}\n    <Location / >\n        Require all denied\n    </Location>\n</VirtualHost>\n{%      endif %}{# this.ENABLE_HTTP #}\n{%      if this.ENABLE_HTTPS %}\n<VirtualHost *:443>\n    ServerName {{this.SERVER_NAME}}\n{{          ssl_mod.setup_no_proxy(this.ssl) }}\n    <Location / >\n        Require all denied\n    </Location>\n</VirtualHost>\n{%      endif %}{# this.ENABLE_HTTPS #}\n\n{%  endif %}{# this.SECURITY_MODE != \"block\" #}\n\n{%- endmacro %}\n", 
          "common/third_party.jinja": "{% macro replace_urls(this, proto, has_pagespeed) %}\n{% \tset preserve_https = this.ENABLE_HTTP and this.ENABLE_HTTPS %}\n{% \tif preserve_https %}\n{%  \tset https_proto = \"https\" %}\n{%  \tset https_url_prefix = \"https://\" + this.SERVER_NAME if proto != \"https\" else \"\" %}\n{% \telse %}\n{%  \tset https_proto = proto %}\n{%  \tset https_url_prefix = \"\" %}\n{% \tendif %}\n\n{% \tif this.DOMAINS_TO_PROXY_HTTP %}\n    # Third-party HTTP-only static servers go through Varnish directly\n{%  \tfor host in this.DOMAINS_TO_PROXY_HTTP %}\n{% \t\t\tif has_pagespeed %}\n    ModPagespeedMapProxyDomain {{proto}}://{{this.SERVER_NAME}}/rev-ps-http-{{host}} http://{{host}}\n{%  \t\tendif %}\n    # Make sure absolute URLs pointing to the server go through us instead\n    Substitute \"s|([\\\"'])(http:)?//{{host}}|$1/rev-third-party-http/{{host}}|q\"\n{%  \tendfor %}\n{% \tendif %}\n\n{% \tif this.DOMAINS_TO_PROXY_HTTPS %}\n    # Third-party HTTPS-only static servers go through Apache, then Varnish\n{%  \tfor host in this.DOMAINS_TO_PROXY_HTTPS %}\n{% \t\t\tif has_pagespeed %}\n    ModPagespeedMapProxyDomain {{https_proto}}://{{this.SERVER_NAME}}/rev-ps-https-{{host}} https://{{host}}\n{%  \t\tendif %}\n    # Make sure absolute URLs pointing to the server go through us instead\n    Substitute \"s|([\\\"'])(https:)?//{{host}}|$1{{https_url_prefix}}/rev-third-party-https/{{host}}|q\"\n{%  \tendfor %}\n{% \tendif %}\n\n{% \tif this.ENABLE_JS_SUBSTITUTE %}\n    # JS substitute must be the first script we load\n    Substitute \"s|<head([^>]*)>|<head$1><script>var revJSSubst={nshards:{{this.DOMAIN_SHARDS_COUNT}},domains:{\n{%- \tset first=True -%}\n{%- \tfor host in this.DOMAINS_TO_OPTIMIZE_HTTP %}{{ \"\" if first else \",\" }}'{{\"http://\" if not host in this.DOMAINS_TO_OPTIMIZE_HTTPS else \"\"}}{{host}}':1{% set first=False %}{% endfor -%}\n{%- \tset first=False if this.DOMAINS_TO_OPTIMIZE_HTTP else True -%}\n{%- \tfor host in this.DOMAINS_TO_OPTIMIZE_HTTPS %}{% if not host in this.DOMAINS_TO_OPTIMIZE_HTTP %}{{ \"\" if first else \",\" }}'https://{{host}}':1{% set first=False %}{% endif %}{% endfor -%}\n    },keep_https:{{ \"1\" if preserve_https else \"0\" }}};</script><script src='/rev-js/rev-js-substitute.min.js'></script>|q\"\n{% \t\tif has_pagespeed %}\n    ModPagespeedDisallow \"{{proto}}://{{this.SERVER_NAME}}/rev-js/*\"\n{%  \tendif %}\n{% \tendif %}{# ENABLE_JS_SUBSTITUTE #}\n\n{% endmacro %}"
        }, 
        "nginx": {
          "common/balancer.jinja": "{% macro balancer_name(this, is_https, prefix) -%}\n{{ prefix }}_{{this.SERVER_NAME|underscore_url}}_{{\"https\" if is_https else \"http\"}}\n{%- endmacro %}\n\n\n{% macro _common_ows_balancer_params(this, is_https) %}\n{%      set origins = this.ORIGIN_SERVERS_HTTPS if is_https else this.ORIGIN_SERVERS_HTTP %}\n{%      set proxy_params = \"keepalive=On\" + (\" ttl=\" + this.ORIGIN_IDLE_TIMEOUT|string if this.ORIGIN_IDLE_TIMEOUT and this.ORIGIN_REUSE_CONNS else \"\") + (\" disablereuse=On\" if not this.ORIGIN_REUSE_CONNS else \"\") %}\n    # TODO: convert Apache proxy params: {{ proxy_params }}\n\n    # TODO: this is Nginx Plus-only, so we have to use ip_hash instead: sticky cookie ROUTEID expires=1h;\n    ip_hash;\n    dynamic_resolve fallback=stale fail_timeout=30s; # must be added AFTER ip_hash\n    keepalive 32;   # keep N connections alive\n{%      for ows in origins %}\n{% \t\t\tset scheme, hostname, port, path = ows|parse_url %}\n    server {{ hostname + \":\" + port|string }} max_fails=0 fail_timeout=0;\n{%      endfor %}\n{%- endmacro %}{# _common_ows_balancer_params #}\n\n\n{% macro define_bp_ows_balancer(this, is_https) %}\n{%  if this.BYPASS_CO_LOCATIONS %}\n# Balancer to bypass CO for certain URLs\nupstream {{ balancer_name(this, is_https, \"bp_ows\") }} {\n{{ \t\t_common_ows_balancer_params(this, is_https) }}\n}\n{%  endif %}\n{%- endmacro %}{# define_bp_ows_balancer #}\n\n\n{% macro define_co_ows_balancer(this, is_https) %}\n# Origin servers balancer\nupstream {{ balancer_name(this, is_https, \"co_ows\") }} {\n{{ \t\t_common_ows_balancer_params(this, is_https) }}\n}\n{%- endmacro %}{# define_co_ows_balancer #}\n", 
          "main.vars.schema": "{\n  \"title\": \"Main web server config\", \n  \"required\": [\n    \"bp\", \n    \"co_profiles\"\n  ], \n  \"additionalProperties\": false, \n  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n  \"type\": \"object\", \n  \"properties\": {\n    \"co_profiles\": {\n      \"additionalProperties\": false, \n      \"required\": [\n        \"VERSION\", \n        \"REV_OPTIMIZATION_LEVEL\", \n        \"REV_CUSTOM_IMG_LEVEL\", \n        \"REV_CUSTOM_JS_LEVEL\", \n        \"REV_CUSTOM_CSS_LEVEL\"\n      ], \n      \"type\": \"object\", \n      \"properties\": {\n        \"REV_OPTIMIZATION_LEVEL\": {\n          \"pattern\": \"min|med|max|adaptive|custom|none\", \n          \"type\": \"string\"\n        }, \n        \"REV_CUSTOM_IMG_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }, \n        \"VERSION\": {\n          \"minimum\": 2, \n          \"type\": \"integer\", \n          \"maximum\": 2\n        }, \n        \"REV_CUSTOM_CSS_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }, \n        \"REV_CUSTOM_JS_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }\n      }, \n      \"title\": \"Optimization profile - Fewer requests\"\n    }, \n    \"bp\": {\n      \"additionalProperties\": false, \n      \"required\": [\n        \"VERSION\", \n        \"ssl\", \n        \"acl\", \n        \"SERVER_NAME\", \n        \"SERVER_ALIASES\", \n        \"SERVER_REGEX_ALIAS\", \n        \"ORIGIN_SERVER_NAME\", \n        \"ENABLE_VARNISH\", \n        \"REV_PROFILES_COUNT\", \n        \"ENABLE_HTTP\", \n        \"ENABLE_HTTPS\", \n        \"ENABLE_SPDY\", \n        \"REV_PROFILES_BASE_PORT_HTTP\", \n        \"REV_PROFILES_BASE_PORT_HTTPS\", \n        \"CONTENT_OPTIMIZERS_HTTP\", \n        \"CONTENT_OPTIMIZERS_HTTPS\", \n        \"DOMAINS_TO_PROXY_HTTP\", \n        \"DOMAINS_TO_PROXY_HTTPS\", \n        \"DOMAIN_SHARDS_COUNT\", \n        \"CUSTOM_WEBSERVER_CODE_BEFORE\", \n        \"CUSTOM_WEBSERVER_CODE_AFTER\", \n        \"BLOCK_CRAWLERS\", \n        \"ENABLE_JS_SUBSTITUTE\", \n        \"ENABLE_HTML_SUBSTITUTE\", \n        \"DEBUG_MODE\", \n        \"DOMAINS_TO_OPTIMIZE_HTTP\", \n        \"DOMAINS_TO_OPTIMIZE_HTTPS\", \n        \"BYPASS_VARNISH_LOCATIONS\", \n        \"PROXY_TIMEOUT\", \n        \"BYPASS_CO_LOCATIONS\", \n        \"ORIGIN_SERVERS_HTTP\", \n        \"ORIGIN_SERVERS_HTTPS\", \n        \"ORIGIN_IDLE_TIMEOUT\", \n        \"ORIGIN_REUSE_CONNS\", \n        \"ENABLE_VARNISH_GEOIP_HEADERS\", \n        \"ENABLE_PROXY_BUFFERING\", \n        \"END_USER_RESPONSE_HEADERS\"\n      ], \n      \"type\": \"object\", \n      \"properties\": {\n        \"REV_PROFILES_BASE_PORT_HTTP\": {\n          \"minimum\": 0, \n          \"type\": \"integer\", \n          \"maximum\": 65000\n        }, \n        \"ENABLE_HTML_SUBSTITUTE\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAINS_TO_OPTIMIZE_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"BYPASS_CO_LOCATIONS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"PROXY_TIMEOUT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"ENABLE_HTTPS\": {\n          \"type\": \"boolean\"\n        }, \n        \"ORIGIN_REUSE_CONNS\": {\n          \"type\": \"boolean\"\n        }, \n        \"REV_PROFILES_BASE_PORT_HTTPS\": {\n          \"minimum\": 0, \n          \"type\": \"integer\", \n          \"maximum\": 65000\n        }, \n        \"BLOCK_CRAWLERS\": {\n          \"type\": \"boolean\"\n        }, \n        \"ENABLE_SPDY\": {\n          \"type\": \"boolean\"\n        }, \n        \"SECURITY_MODE\": {\n          \"pattern\": \"off|on|block|detect\", \n          \"type\": \"string\"\n        }, \n        \"SERVER_NAME\": {\n          \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$\", \n          \"type\": \"string\"\n        }, \n        \"CUSTOM_WEBSERVER_CODE_AFTER\": {\n          \"type\": \"string\"\n        }, \n        \"SERVER_REGEX_ALIAS\": {\n          \"type\": \"string\"\n        }, \n        \"REV_PROFILES_COUNT\": {\n          \"minimum\": 1, \n          \"type\": \"integer\", \n          \"maximum\": 4\n        }, \n        \"CONTENT_OPTIMIZERS_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"DOMAINS_TO_PROXY_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"END_USER_RESPONSE_HEADERS\": {\n          \"items\": {\n            \"type\": \"object\", \n            \"properties\": {\n              \"header_value\": {\n                \"type\": \"string\"\n              }, \n              \"operation\": {\n                \"type\": \"string\"\n              }, \n              \"header_name\": {\n                \"type\": \"string\"\n              }\n            }\n          }, \n          \"type\": \"array\"\n        }, \n        \"BYPASS_VARNISH_LOCATIONS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"ssl\": {\n          \"additionalProperties\": false, \n          \"type\": \"object\", \n          \"properties\": {}, \n          \"title\": \"SSL setup\"\n        }, \n        \"CONTENT_OPTIMIZERS_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"VERSION\": {\n          \"minimum\": 23, \n          \"type\": \"integer\", \n          \"maximum\": 23\n        }, \n        \"ORIGIN_SERVER_NAME\": {\n          \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$\", \n          \"type\": \"string\"\n        }, \n        \"ENABLE_JS_SUBSTITUTE\": {\n          \"type\": \"boolean\"\n        }, \n        \"SERVER_ALIASES\": {\n          \"items\": {\n            \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$\", \n            \"type\": \"string\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"ENABLE_VARNISH\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAINS_TO_OPTIMIZE_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"ORIGIN_IDLE_TIMEOUT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"ENABLE_PROXY_BUFFERING\": {\n          \"type\": \"boolean\"\n        }, \n        \"ENABLE_HTTP\": {\n          \"type\": \"boolean\"\n        }, \n        \"CUSTOM_WEBSERVER_CODE_BEFORE\": {\n          \"type\": \"string\"\n        }, \n        \"ORIGIN_SERVERS_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"ENABLE_VARNISH_GEOIP_HEADERS\": {\n          \"type\": \"boolean\"\n        }, \n        \"acl\": {\n          \"additionalProperties\": true, \n          \"required\": [\n            \"enabled\", \n            \"action\", \n            \"acl_rules\"\n          ], \n          \"type\": \"object\", \n          \"properties\": {\n            \"action\": {\n              \"oneOf\": [\n                {\n                  \"pattern\": \"allow_except\"\n                }, \n                {\n                  \"pattern\": \"deny_except\"\n                }\n              ], \n              \"type\": \"string\"\n            }, \n            \"enabled\": {\n              \"type\": \"boolean\"\n            }, \n            \"acl_rules\": {\n              \"items\": {\n                \"additionalProperties\": true, \n                \"required\": [\n                  \"host_name\", \n                  \"subnet_mask\", \n                  \"country_code\", \n                  \"header_name\", \n                  \"header_value\"\n                ], \n                \"type\": \"object\", \n                \"properties\": {\n                  \"subnet_mask\": {\n                    \"pattern\": \"^(([0-9]{1,2})|([0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}))?$\", \n                    \"type\": \"string\"\n                  }, \n                  \"header_name\": {\n                    \"type\": \"string\"\n                  }, \n                  \"host_name\": {\n                    \"pattern\": \"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,61}[a-zA-Z0-9]))*)?$\", \n                    \"type\": \"string\"\n                  }, \n                  \"country_code\": {\n                    \"pattern\": \"^([A-Z][A-Z])?$\", \n                    \"type\": \"string\"\n                  }, \n                  \"header_value\": {\n                    \"type\": \"string\"\n                  }\n                }\n              }, \n              \"type\": \"array\"\n            }\n          }, \n          \"title\": \"Browser Proxy Access Control Lists\"\n        }, \n        \"DEBUG_MODE\": {\n          \"type\": \"boolean\"\n        }, \n        \"ORIGIN_SERVERS_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"DOMAIN_SHARDS_COUNT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"DOMAINS_TO_PROXY_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }\n      }, \n      \"title\": \"Browser Proxy config\"\n    }\n  }\n}", 
          "common/loop_detect.jinja": "{% macro loop_detect(this) %}\n{%      set header_name = \"X-Rev-Nodes\" %}\n{%      set header_name_var = \"http_x_rev_nodes\" %}\n{%      set node_name = HOSTNAME_SHORT %}\n    # If we've already visited this server during this request, in the same role (BP or CO),\n    # return an error page and status 508 (loop detected).\n    if (${{ header_name_var }} ~ {{node_name}}) {\n        return 508 \"A redirection loop was detected on '{{node_name}}'. Please review the server configuration.\";\n    }\n    # Add this host to the request list of visited nodes\n    proxy_set_header {{header_name}} \"${{\"{\"}}{{ header_name_var }}{{\"}\"}} {{node_name}}\";\n{%      if this.DEBUG_MODE %}\n    # Add this host to the response list of visited nodes\n    add_header {{header_name}} \"${{\"{\"}}{{ header_name_var }}{{\"}\"}} {{node_name}}\";\n{%      endif %}\n{% endmacro %}{# loop_detect #}\n", 
          "co/standard_profiles/default_customer_profiles.jinja": "{% macro _base_filters(this) -%}\n    # Begin base filters\n    pagespeed EnableFilters add_head;\n    pagespeed EnableFilters inline_import_to_link;\n    pagespeed EnableFilters insert_ga;\n    pagespeed EnableFilters remove_comments;\n    pagespeed EnableFilters collapse_whitespace;\n    pagespeed EnableFilters extend_cache;\n    pagespeed EnableFilters extend_cache_pdfs;\n    pagespeed EnableFilters remove_quotes;\n    # We already use Boomerang, don't need this\n    #pagespeed EnableFilters add_instrumentation;\n    pagespeed EnableFilters convert_meta_tags;\n    pagespeed EnableFilters insert_dns_prefetch;\n\n    # Allow AJAX loaded resources to be optimized\n    # See: https://developers.google.com/speed/pagespeed/module/system#ipro\n    pagespeed InPlaceResourceOptimization on;\n\n    # Filters to lower bandwidth usage\n    pagespeed EnableFilters combine_heads;\n    pagespeed EnableFilters elide_attributes;\n    pagespeed EnableFilters trim_urls;\n    # End base filters\n{%- endmacro %}\n\n{% macro profile_selection(this) -%}\n{% if this.REV_OPTIMIZATION_LEVEL == \"adaptive\" -%}\n    # TODO: implement\n{% endif %}\n    # Always use profile 0 by default\n    # TODO: RevProfilesAddSelectionRule 0 1==1\n{%- endmacro %}\n\n{% macro _optimize_up_to_level(level) -%}\n{% if level == \"low\" %}\n{% set lvl = 1 %}\n{% elif level == \"medium\" %}\n{% set lvl = 2 %}\n{% elif level == \"high\" %}\n{% set lvl = 3 %}\n{% else %}\n{% set lvl = 0 %}\n{% endif %}\n{% if lvl >= 1 %}\n{{ caller(\"low\") }}\n{% endif %}\n{% if lvl >= 2 %}\n{{ caller(\"medium\") }}\n{% endif %}\n{% if lvl == 3 %}\n{{ caller(\"high\") }}\n{% endif %}\n{%- endmacro %}\n\n{% macro _custom_js_optimizations(js_level) -%}\n{% call(level) _optimize_up_to_level(js_level) %}\n{% if level == \"low\" -%}\n    # Begin custom JS optimizations - low\n# See this bug: https://code.google.com/p/modpagespeed/issues/detail?id=821\n#<pagespeed If spdy>;\n#    pagespeed EnableFilters outline_javascript;\n#</ModPagespeedIf>\n    # End custom JS optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom JS optimizations - medium\n    pagespeed EnableFilters extend_cache_scripts;\n    pagespeed EnableFilters rewrite_javascript;\n    #pagespeed UseExperimentalJsMinifier On;\n# TODO: <pagespeed If !spdy>;\n# TODO:     pagespeed EnableFilters inline_javascript;\n# TODO: </ModPagespeedIf>\n    # End custom JS optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom JS optimizations - high\n    pagespeed EnableFilters defer_javascript;\n    pagespeed EnableFilters combine_javascript;\n    # Don't let PageSpeed externalize JS - all JS files must pass through the BP\n    #pagespeed EnableFilters canonicalize_javascript_libraries;\n    pagespeed EnableFilters make_google_analytics_async;\n    # End custom JS optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_css_optimizations(css_level) -%}\n{% call(level) _optimize_up_to_level(css_level) %}\n{% if level == \"low\" -%}\n    # Begin custom CSS optimizations - low\n    pagespeed EnableFilters move_css_above_scripts;\n    pagespeed EnableFilters move_css_to_head;\n# See this bug: https://code.google.com/p/modpagespeed/issues/detail?id=821\n#<pagespeed If spdy>;\n#    pagespeed EnableFilters outline_css;\n#</ModPagespeedIf>\n    pagespeed EnableFilters rewrite_style_attributes;\n    # End custom CSS optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom CSS optimizations - medium\n    pagespeed EnableFilters extend_cache_css;\n    pagespeed EnableFilters combine_css;\n# TODO: <pagespeed If !spdy>;\n# TODO:     pagespeed EnableFilters inline_css;\n# TODO: </ModPagespeedIf>\n    pagespeed EnableFilters flatten_css_imports;\n    pagespeed EnableFilters rewrite_css;\n    pagespeed EnableFilters fallback_rewrite_css_urls;\n    pagespeed EnableFilters rewrite_style_attributes_with_url;\n    # End custom CSS optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom CSS optimizations - high\n# TODO: <pagespeed If !spdy>;\n# TODO:     pagespeed EnableFilters inline_google_font_css;\n# TODO: </ModPagespeedIf>\n    pagespeed EnableFilters prioritize_critical_css;\n    # End custom CSS optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_img_optimizations(img_level) -%}\n{% call(level) _optimize_up_to_level(img_level) %}\n{% if level == \"low\" -%}\n    # Begin custom IMG optimizations - low\n    pagespeed EnableFilters insert_image_dimensions;\n    pagespeed EnableFilters dedup_inlined_images;\n    # End custom IMG optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom IMG optimizations - medium\n    pagespeed EnableFilters sprite_images;\n    pagespeed EnableFilters extend_cache_images;\n    pagespeed EnableFilters rewrite_images;\n    #pagespeed EnableFilters convert_jpeg_to_progressive;\n# TODO: <pagespeed If !spdy>;\n# TODO:     pagespeed EnableFilters inline_images;\n# TODO: </ModPagespeedIf>\n    pagespeed EnableFilters recompress_images;\n    pagespeed EnableFilters recompress_jpeg;\n    pagespeed EnableFilters recompress_png;\n    pagespeed EnableFilters recompress_webp;\n    pagespeed EnableFilters convert_gif_to_png;\n    pagespeed EnableFilters strip_image_color_profile;\n    pagespeed EnableFilters strip_image_meta_data;\n    pagespeed EnableFilters resize_images;\n    pagespeed EnableFilters resize_rendered_image_dimensions;\n    pagespeed EnableFilters lazyload_images;\n    pagespeed CriticalImagesBeaconEnabled Off;\n\n    pagespeed ImageRecompressionQuality 70;\n    # End custom IMG optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom IMG optimizations - high\n    pagespeed EnableFilters convert_png_to_jpeg;\n    # webp conversion is costly and not all browsers support webp\n    #pagespeed EnableFilters convert_jpeg_to_webp;\n    #pagespeed EnableFilters inline_preview_images;\n    pagespeed EnableFilters resize_mobile_images;\n    # End custom IMG optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_optimizations(this) -%}\n    # Optimization level: Custom\n    {{_custom_js_optimizations(this.REV_CUSTOM_JS_LEVEL)}}\n    {{_custom_css_optimizations(this.REV_CUSTOM_CSS_LEVEL)}}\n    {{_custom_img_optimizations(this.REV_CUSTOM_IMG_LEVEL)}}\n    # End optimization level: Custom\n{%- endmacro %}\n\n{% macro _level_optimizations(level) -%}\n    # Optimization level: {{level}}\n    {{_custom_js_optimizations(level)}}\n    {{_custom_css_optimizations(level)}}\n    {{_custom_img_optimizations(level)}}\n    # End optimization level: {{level}}\n{%- endmacro %}\n\n{% macro profile0(this) -%}\n    {{_base_filters()}}\n{% if this.REV_OPTIMIZATION_LEVEL == \"min\" %}\n    {{_level_optimizations(\"low\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"med\" %}\n    {{_level_optimizations(\"medium\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"max\" %}\n    {{_level_optimizations(\"high\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"custom\" %}\n    {{_custom_optimizations(this)}}\n{% else %}{# including \"adaptive\", where profile0 means \"don't optimize\" #}\n    # Optimizations turned off\n{% endif %}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile1(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"low\")}}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile2(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"medium\")}}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile3(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"high\")}}\n    # End optimizations\n{%- endmacro %}\n", 
          "common/ssl.jinja": "{% set ssl_ciphers = \"\\\"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA 3DES RC4 !aNULL !eNULL !LOW !MD5 !EXP !PSK !SRP !DSS +3DES 3DES +RC4 RC4\\\"\" %}\n{% set site_cert_dir = \"/opt/revsw-config/apache/\" + GLOBAL_SITE_NAME + \"/certs\" %}\n\n{% macro _do_setup_no_proxy(this, cert_dir) %}\n    # Disable SSLv2/3 because of SNI, which requires TLS\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    # No need to mitigate CRIME attack - SSL compression is off by default\n    # Use stronger ciphers, which may mitigate BEAST attacks\n    ssl_ciphers {{ssl_ciphers}};\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_certificate {{cert_dir}}/server-chained.crt;\n    ssl_certificate_key {{cert_dir}}/server.key;\n{%- endmacro %}\n\n{% macro _do_setup_proxy_only(this, cert_dir) %}\n    # Disable SSLv2/3 because of SNI, which requires TLS\n    proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    # No need to mitigate CRIME attack - SSL compression is off by default\n    # Use stronger ciphers, which may mitigate BEAST attacks\n    proxy_ssl_ciphers {{ssl_ciphers}};\n    proxy_ssl_certificate {{cert_dir}}/server-chained.crt;\n    proxy_ssl_certificate_key {{cert_dir}}/server.key;\n    proxy_ssl_verify off;\n{%- endmacro %}\n\n{% macro setup_no_proxy(this) %}\n    # Begin SSL setup (no proxy)\n{{  _do_setup_no_proxy(this, site_cert_dir) }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup_proxy_only(this) %}\n    # Begin SSL setup (proxy-only)\n{{  _do_setup_proxy_only(this, site_cert_dir) }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup(this) %}\n    # Begin SSL setup\n{{  _do_setup_no_proxy(this, site_cert_dir) }}\n{{  _do_setup_proxy_only(this, site_cert_dir) }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup_bp_co(this) %}\n    # Begin SSL setup\n{{  _do_setup_no_proxy(this, \"/opt/revsw-config/apache/co-certs\") }}\n{{  _do_setup_proxy_only(this, \"/opt/revsw-config/apache/co-certs\") }}\n    # End SSL setup\n{%- endmacro %}\n", 
          "main.jinja": "\n{% import \"co/standard_profiles/default_customer_profiles.jinja\" as co_profiles_mod %}\n{% import \"bp/bp.jinja\" as bp_mod %}\n\n{% call(before) bp_mod.setup(bp, co_profiles_mod, co_profiles) %}\n{% endcall %}\n", 
          "bp/bp.jinja": "{% import \"common/ssl.jinja\" as ssl_mod %}\n{% import \"common/third_party.jinja\" as third_party_mod %}\n{% import \"common/loop_detect.jinja\" as loop_detect_mod %}\n{% import \"common/balancer.jinja\" as balancer_mod %}\n\n{% macro _common_upstream_block_co(this, balancer_name, routeid_suffix, profiles_base_port, is_https) %}\n  {% set content_optimizers = this.CONTENT_OPTIMIZERS_HTTPS if is_https else this.CONTENT_OPTIMIZERS_HTTP %}\n  {% if content_optimizers|list|length > 0 %}\n    # Content optimizer balancer.\n    # Balancer members are reused immediately even if they have errors (retry=0),\n    # to allow for DNS-based HA.\n    # We try to maintain a connection to them for as long as possible (keepalive=On).\n    {% set proto_prefix = \"http://\" if content_optimizers[0]|truncate(7, True, \"\") == \"http://\" else \"https://\" %}\n    # proto_prefix = {{proto_prefix}}\n    upstream {{ balancer_mod.balancer_name(this, is_https, balancer_name) }} {\n    # TODO: this is Nginx Plus-only, so we have to use ip_hash instead: sticky cookie routeid{{routeid_suffix}} expires=1h;\n    ip_hash;\n    dynamic_resolve fallback=stale fail_timeout=30s; # must be added AFTER ip_hash\n    {% for co in content_optimizers %}\n      server {{ co|replace(proto_prefix, \"\") + \":\" + profiles_base_port|string }} max_fails=0 fail_timeout=0;\n    {% endfor %}\n    keepalive 32; # keep N connections alive\n    }\n  {% endif %}\n{%- endmacro %}{# _common_upstream_block_co #}\n\n\n{% macro _common_upstream_block_varnish(this, varnish_port, is_https) %}\n  upstream {{ balancer_mod.balancer_name(this, is_https, \"varnish\") }} {\n  keepalive 32; # keep N connections alive\n  server 127.0.0.1:{{ varnish_port}} max_fails=0 fail_timeout=0;\n  }\n{%- endmacro %}{# _common_upstream_block_varnish #}\n\n\n{% macro _common_profiles_and_security(this, co_profiles_mod, co_profiles) %}\n  # Start rules from scratch\n  # TODO: RevProfilesFlushSelectionRules\n\n  # Run customized profile selection algo\n  {{ co_profiles_mod.profile_selection(co_profiles) }}\n\n  # Security setup\n  {% if this.SECURITY_MODE == \"on\" %}\n    # TODO: SecRuleEngine On\n  {% elif this.SECURITY_MODE == \"detect\" %}\n    # TODO: SecRuleEngine DetectionOnly\n  {% else %}\n    # TODO: SecRuleEngine Off\n  {% endif %}\n  # TODO: SecAuditLogStorageDir /var/cache/modsecurity/audit/{{this.SERVER_NAME}}/\n  # TODO: SecAuditLog \"/var/cache/modsecurity/audit/{{this.SERVER_NAME}}.index\"\n  # TODO: SecAuditLogType Concurrent\n\n  {% set geoip_enabled = this.ENABLE_VARNISH_GEOIP_HEADERS %}\n  {% if this.acl.enabled %}\n    # Begin ACLs\n    {% if this.acl.acl_rules %}\n      {% set countries = this.acl.acl_rules|selectattr(\"country_code\")|list %}\n      {% if countries|length %}{# use GeoIP #}\n\t{% set geoip_enabled = True %}\n\tif ($geoip_city_country_code ~ \"^({{ countries|map(attribute=\"country_code\")|join(\"|\") }})\") {\n\tset $is_acl_country yes;\n\t}\n      {% endif %}{# use GeoIP #}\n\n      {# # Do we need rDNS support ? #}\n      {% set use_rdns = global_var_set(\"USE_RDNS\", False) %}\n      {% for rule in this.acl.acl_rules %}\n\t{% if not rule.host_name|is_ipv4 %}\n\t  {% set use_rdns = global_var_set(\"USE_RDNS\", True) %}\n\t{% endif %}\n      {% endfor %}{# rule in this.acl.acl_rules #}\n\n      {% if global_var_get(\"USE_RDNS\") %}\n\trdns on;\n      {% endif %}{# use_rdns #}\n\n      {% if this.acl.action == \"allow_except\" %}\n\t{% for rule in this.acl.acl_rules %}\n\t  {% if rule.host_name|is_ipv4 %}\n\t    if ($remote_addr =/ \"{{rule.host_name}}{{ \"/\" + rule.subnet_mask|netmask_bits if rule.subnet_mask else \"\" }}\") {\n\t    return 403;\n\t    }\n\t  {% elif rule.host_name %}\n\t    if ($rdns_hostname = {{ rule.host_name }}) {\n\t    return 403;\n\t    }\n\t  {% endif %}\n\t  {% if rule.header_name %}\n\t    if ($http_{{ rule.header_name|lower|replace(\"-\", \"_\") }} = \"{{ rule.header_value }}\") {\n\t    return 403;\n\t    }\n\t  {% endif %}\n\t{% endfor %}{# rule in this.acl.acl_rules #}\n\t{% if countries|length %}{# use GeoIP #}\n\t  if ($is_acl_country = yes) {\n\t  return 403;\n\t  }\n\t{% endif %}\n      {% else %}{# this.acl.action == \"deny_except\" #}\n\t{% set deny_cond = global_var_set(\"DENY_COND\", \"x\") %}\n\tset $deny_cond x;\n\t{% for rule in this.acl.acl_rules %}\n\t  {% if rule.host_name|is_ipv4 %}\n\t    if ($remote_addr !=/ \"{{rule.host_name}}{{ \"/\" + rule.subnet_mask|netmask_bits if rule.subnet_mask else \"\" }}\") {\n\t    {% set deny_cond = global_var_set(\"DENY_COND\", deny_cond + 'x') %}\n\t    set $deny_cond \"${deny_cond}x\";\n\t    }\n\t  {% elif rule.host_name %}\n\t    if ($rdns_hostname != {{ rule.host_name }}) {\n\t    {% set deny_cond = global_var_set(\"DENY_COND\", deny_cond + 'x') %}\n\t    set $deny_cond \"${deny_cond}x\";\n\t    }\n\t  {% endif %}\n\t  {% if rule.header_name %}\n\t    if ($http_{{ rule.header_name|lower|replace(\"-\", \"_\") }} != \"{{ rule.header_value }}\") {\n\t    {% set deny_cond = global_var_set(\"DENY_COND\", deny_cond + 'x') %}\n\t    set $deny_cond \"${deny_cond}x\";\n\t    }\n\t  {% endif %}\n\t{% endfor %}{# rule in this.acl.acl_rules #}\n\t{% if countries|length %}{# use GeoIP #}\n\t  if ($is_acl_country != yes) {\n\t  {% set deny_cond = global_var_set(\"DENY_COND\", deny_cond + 'x') %}\n\t  set $deny_cond \"${deny_cond}x\";\n\t  }\n\t{% endif %}\n\tif ($deny_cond = {{ global_var_get(\"DENY_COND\") }}) {\n\treturn 403;\n\t}\n      {% endif %}{# this.acl.action == \"allow/deny_except\" #}\n    {% elif this.acl.action == \"deny_except\" %}{# not this.acl.acl_rules #}\n      deny all;\n    {% endif %}{# this.acl.acl_rules #}\n    # End ACLs\n  {% endif %}{# this.acl.enabled #}\n\n  {% if geoip_enabled %}\n    {% if this.ENABLE_VARNISH_GEOIP_HEADERS %}\n      proxy_set_header X-Rev-ContinentCode $geoip_city_continent_code;\n      proxy_set_header X-Rev-CountryCode $geoip_city_country_code;\n      proxy_set_header X-Rev-CountryName $geoip_city_country_name;\n      proxy_set_header X-Rev-RegionCode $geoip_region;\n      proxy_set_header X-Rev-CityName $geoip_city;\n      proxy_set_header X-Rev-MetroCode $geoip_dma_code;\n      proxy_set_header X-Rev-AreaCode $geoip_area_code;\n      proxy_set_header X-Rev-PostalCode $geoip_postal_code;\n      proxy_set_header X-Rev-Longitude $geoip_longitude;\n      proxy_set_header X-Rev-Latitude $geoip_latitude;\n      proxy_set_header X-Rev-Node \"{{HOSTNAME_SHORT}}\";\n    {% endif %}{# this.ENABLE_VARNISH_GEOIP_HEADERS #}\n    {% if this.DEBUG_MODE %}\n      add_header X-Rev-ContinentCode $geoip_city_continent_code;\n      add_header X-Rev-CountryCode $geoip_city_country_code;\n      add_header X-Rev-CountryName $geoip_city_country_name;\n      add_header X-Rev-RegionCode $geoip_region;\n      add_header X-Rev-CityName $geoip_city;\n      add_header X-Rev-MetroCode $geoip_dma_code;\n      add_header X-Rev-AreaCode $geoip_area_code;\n      add_header X-Rev-PostalCode $geoip_postal_code;\n      add_header X-Rev-Longitude $geoip_longitude;\n      add_header X-Rev-Latitude $geoip_latitude;\n      add_header X-Rev-Node \"{{HOSTNAME_SHORT}}\";\n    {% endif %}\n    # End GeoIP setup\n  {% endif %}{# geoip_enabled #}\n{%- endmacro %}\n\n{% macro _common_sharding(this) %}\n  {% for shard in range(this.DOMAIN_SHARDS_COUNT) %}\n    # Sharding alias\n    # TODO: ServerAlias s{{shard}}-{{this.SERVER_NAME}}\n  {% endfor %}\n{%- endmacro %}\n\n{% macro _common_static_servers(this, servers, extra_servers, proto) %}\n  {% for host in (servers|list + extra_servers|list)|flatten_to_set %}\n    {% set url = proto + \"://\" + host %}\n    {% set proxy_var = \"$\" + host|underscore_url %}\n    location /rev-third-party-{{proto}}/{{host}}/ {\n\n    # _common_static_servers\n    # proxy_set_header Host {{host}};\n    # _common_static_servers\n    # BEGIN: Setting up the default headers\n    {{ _common_headers(this, host) }}\n    # END: Setting up the default headers\n\n\n    # Don't propagate \"Connection: close\" from client\n    proxy_set_header Connection \"\";\n\n    proxy_pass {{url}}/;\n\n    # TODO: RevProfilesMode Off\n\n    {% if this.ENABLE_HTML_SUBSTITUTE %}\n      # Make sure absolute URLs pointing to the origin go through us instead\n      subs_filter ([\\\"'])(https?:)?//{{this.ORIGIN_SERVER_NAME}} $1 r;\n\n      {{ third_party_mod.replace_urls(this, proto, False)|indent }}\n    {% endif %}\n    }\n  {% endfor %}\n{%- endmacro %}{# _common_static_servers #}\n\n{% macro _common_co_location_params(this, balancer_name, profiles_base_port, is_https, rel_url) %}\n  {% set content_optimizers = this.CONTENT_OPTIMIZERS_HTTPS if is_https else this.CONTENT_OPTIMIZERS_HTTP %}\n  {% set proto_prefix = \"http://\" if content_optimizers[0]|truncate(7, True, \"\") == \"http://\" else \"https://\" %}\n  # proto_prefix = {{proto_prefix}}\n  {% set co_base_url = proto_prefix + balancer_mod.balancer_name(this, is_https, balancer_name) %}{# the balancer is defined in _common_upstream_block_co() #}\n  proxy_pass {{ co_base_url }}{{ rel_url }};\n\n  # Wait at most for configured seconds for a reply from CO, then return error message.\n  # This will make recovery from CO failure quicker.\n  # The DNS monitor will assign another CO to the same domain name.\n  proxy_read_timeout {{this.PROXY_TIMEOUT}}s;\n\n  # mod_rev_profile_selection\n  # TODO: ProxyConnPoolCount {{this.REV_PROFILES_COUNT}}\n  # TODO: RevProfilesBasePort {{profiles_base_port}}\n{%- endmacro %}{# _common_co_location_params #}\n\n{% macro _common_proxy_settings(this) %}\n  {% if this.DEBUG_MODE %}\n    # Per-vhost log while in debug mode\n    error_log /var/log/nginx/{{this.SERVER_NAME}}.error debug;\n  {% endif %}\n\n  # Default Host header is the same as our server name\n  # _common_proxy_settings\n  # proxy_set_header Host {{this.SERVER_NAME}};\n  # _common_proxy_settings\n  # BEGIN: Setting up the default headers\n  {{ _common_headers(this, this.SERVER_NAME) }}\n  # END: Setting up the default headers\n\n  # By default 1.0, not good for keepalives\n  proxy_http_version 1.1;\n  # Don't cut the cord to the backend every time a client disconnects\n  proxy_ignore_client_abort on;\n  {% if not this.ENABLE_PROXY_BUFFERING %}\n    # We want to serve data to clients right away\n    proxy_buffering off;\n  {% endif %}\n  # Don't propagate \"Connection: close\" from client\n  proxy_set_header Connection \"\";\n{%- endmacro %}\n\n{% macro _common_proxy_config_step1(this, co_profiles_mod, co_profiles, varnish_port, profiles_base_port, is_https) %}\n  server_name {{ this.SERVER_NAME }} {%- for alias in this.SERVER_ALIASES %} {{ alias }}{%- endfor -%};\n  {% if this.SERVER_REGEX_ALIAS %}\n    server_name \"~{{ this.SERVER_REGEX_ALIAS }}\";\n  {% endif %}\n  # Save original Host header for Varnish caching rules\n  proxy_set_header X-Orig-Host $host;\n  # Don't propagate \"Connection: close\" from client\n  proxy_set_header Connection \"\";\n\n  {{ _common_sharding(this) }}\n\n  {{ _common_proxy_settings(this) }}\n  {{ loop_detect_mod.loop_detect(this) }}\n\n  # Never disable the Varnish backend, even if it has temporary problems.\n  location / {\n  proxy_pass http://{{ balancer_mod.balancer_name(this, is_https, \"varnish\") }}/;\n\n  # Wait at most for configured seconds for a reply from Varnish, then return error message.\n  proxy_read_timeout {{this.PROXY_TIMEOUT}}s;\n  }\n\n  # mod_rev_profile_selection\n  # TODO: RevProfilesMode varnish_step1\n\n  {{ _common_profiles_and_security(this, co_profiles_mod, co_profiles) }}\n\n  {% if this.BYPASS_VARNISH_LOCATIONS %}\n    # Bypass Varnish for certain URLs\n\n    # First set up CO balancer\n    {% for url in this.BYPASS_VARNISH_LOCATIONS %}\n      {% set rel_url = url if url[0] != \"/\" else url[1:] %}\n      location /{{rel_url}} {\n      {{ _common_co_location_params(this, \"bp_cos_bypass\", profiles_base_port, is_https, rel_url)|indent(4) }}{# same balancer name as _common_upstream_block_co #}\n\n      # TODO: RevProfilesMode full\n      }\n    {% endfor %}\n    # End Varnish bypass\n  {% endif %}{# this.BYPASS_VARNISH_LOCATIONS #}\n{% endmacro %}{# _common_proxy_config_step1 #}\n\n{% macro _common_proxy_config_step2(this, co_profiles_mod, co_profiles, profiles_base_port, is_https) %}\n  server_name {{this.SERVER_NAME}};\n\n  {{ _common_proxy_settings(this) }}\n\n  {% if not this.ENABLE_VARNISH %}\n    {{ _common_sharding(this) }}\n    {{ loop_detect_mod.loop_detect(this) }}\n  {% endif %}\n\n  {% if this.BLOCK_CRAWLERS %}\n    # Don't allow creepy crawlers (Googlebot etc) on our site\n    location = /robots.txt {\n    alias /var/www/robots.txt;\n    }\n  {% endif %}\n\n  location /rev-diablo {\n  # TODO: RevProfilesMode Off\n  {% if this.ENABLE_JS_SUBSTITUTE %}\n    # TODO: RevJSSubstituteEnabled Off\n  {% endif %}\n  proxy_pass http://rev-js-source.revdn.net;\n  # location /rev-diablo\n  proxy_set_header Host $proxy_host;\n  # location /rev-diablo\n  # Don't propagate \"Connection: close\" from client\n  proxy_set_header Connection \"\";\n\n\n  }\n\n  {% if this.ENABLE_JS_SUBSTITUTE %}\n    # Rev JS substitute and accompanying script\n    # TODO: RevJSSubstituteEnabled On\n    # TODO: Alias /rev-js /usr/share/revsw-libapache2-mod-rev-js-substitute\n    # TODO: ProxyPass /rev-js !\n    # TODO: <Directory /usr/share/revsw-libapache2-mod-rev-js-substitute>\n    # TODO: RevJSSubstituteEnabled Off\n    # TODO: Require all granted\n    # TODO: </Directory>\n  {% endif %}{# ENABLE_JS_SUBSTITUTE #}\n\n  location / {\n  {{ _common_co_location_params(this, \"bp_cos\", profiles_base_port, is_https, \"/\")|indent(4) }}\n  }\n\n  {% if this.BYPASS_CO_LOCATIONS %}{# the balancer is defined in balancer_mod.define_bp_ows_balancer() #}\n    {% set origins = this.ORIGIN_SERVERS_HTTPS if is_https else this.ORIGIN_SERVERS_HTTP %}\n    {% set ows_proto = \"https://\" if origins[0]|truncate(5, True, \"\") == \"https\" else \"http://\" %}\n    {% for url in this.BYPASS_CO_LOCATIONS %}\n      {% set rel_url = url if url[0] != \"/\" else url[1:] %}\n      location /{{rel_url}} {\n      proxy_pass {{ ows_proto }}{{ balancer_mod.balancer_name(this, is_https, \"bp_ows\") }}/{{ rel_url }};\n      # TODO: RevProfilesMode off\n      # Make sure the origin sees the right Host header\n      proxy_ssl_server_name on;\n      proxy_ssl_name {{this.ORIGIN_SERVER_NAME}};\n      # if this.BYPASS_CO_LOCATIONS\n      proxy_set_header Host {{this.ORIGIN_SERVER_NAME}};\n      # if this.BYPASS_CO_LOCATIONS\n      # Don't propagate \"Connection: close\" from client\n      proxy_set_header Connection \"\";\n      }\n    {% endfor %}{# url in this.BYPASS_CO_LOCATIONS #}\n    # End CO bypass\n  {% endif %}{# this.BYPASS_CO_LOCATIONS #}\n\n  {% if this.ENABLE_VARNISH %}\n    # TODO: RevProfilesMode varnish_step2\n  {% else %}\n    # TODO: RevProfilesMode full\n\n    {{ _common_profiles_and_security(this, co_profiles_mod, co_profiles) }}\n  {% endif %}\n{%- endmacro %}{# _common_proxy_config_step2 #}\n\n{% macro _common_frontend(this) %}\n  # Save client address\n  proxy_set_header X-Forwarded-for $remote_addr;\n\n  # Optional user customizations in BP frontend\n  {{ this.CUSTOM_WEBSERVER_CODE_BEFORE|extract_custom_webserver_code(\"NGINX\") }}\n  # End optional user customizations in BP frontend\n{%- endmacro %}{# _common_frontend #}\n\n{# BEGIN: (BP-342) Common macros for headers #}\n{% macro _common_headers(this, host_name) %}\n\n  # Don't propagate \"Connection: close\" from client\n  proxy_set_header Connection \"\";\n\n  # _common_headers for {{host_name}}\n  proxy_set_header Host {{host_name}};\n  # _common_headers\n\n  # BEGIN: (BP-92) Response headers\n  {% if this.END_USER_RESPONSE_HEADERS %}\n    {% for key in this.END_USER_RESPONSE_HEADERS %}\n      {% if key.operation == \"add\" %}\n \tmore_set_headers {{ key.header_name }}:{{ key.header_value}};\n      {% endif %}\n      {% if key.operation == \"delete\" %}\n \tmore_clear_headers {{ key.header_name }};\n      {% endif %}\n      {% if key.operation == \"replace\" %}\n\tmore_clear_headers {{ key.header_name }};\n \tmore_set_headers {{ key.header_name }}:{{ key.header_value}};\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n  # END: (BP-92)  \n\n{%- endmacro %}\n{# END: (BP-342) Common macros for headers #}\n\n\n{% macro setup(this, co_profiles_mod, co_profiles) %}\n\n  {% if this.SECURITY_MODE != \"block\" %}{# \"block\" means \"block site\", so we simply remove the site from Apache #}\n\n    {% if this.ENABLE_HTTP %}\n      {{ _common_upstream_block_co(this, \"bp_cos_bypass\", \"B\", this.REV_PROFILES_BASE_PORT_HTTP, false) }}{# same balancer name as _common_co_location_params #}\n      {{ _common_upstream_block_co(this, \"bp_cos\", \"\", this.REV_PROFILES_BASE_PORT_HTTP, false) }}{# same balancer name as _common_co_location_params #}\n      {% if this.ENABLE_VARNISH %}\n\t{{ _common_upstream_block_varnish(this, 8080, false) }}\n      {% endif %}\n      {{ balancer_mod.define_bp_ows_balancer(this, false) }}\n      server {\n      listen 80;\n\n      {% if this.ENABLE_VARNISH %}\n\t{{ _common_proxy_config_step1(this, co_profiles_mod, co_profiles, 8080, this.REV_PROFILES_BASE_PORT_HTTP, false) }}\n\t{{ _common_frontend(this) }}\n\t}\n\tserver {\n\tlisten 127.0.0.1:9080;\n\n\t# Don't log accesses on this vhost; they all come from localhost\n\taccess_log off;\n\n\t# Make sure the connections between Varnish and BP are kept alive for 10 minutes\n\tkeepalive_timeout 600s;\n\n{% else %}{# not this.ENABLE_VARNISH #}\n  {{ _common_frontend(this) }}\n{% endif %}{# this.ENABLE_VARNISH #}\n\n{% if this.DOMAINS_TO_PROXY_HTTPS %}\n  # Must enable SSL proxy support for HTTPS static content servers\n  {{ ssl_mod.setup_proxy_only(this.ssl) }}\n{% endif %}\n\n# Optional customizations before generic BP config\n{{ caller(True) }}\n# End optional customizations before generic BP config\n\n{% set extra_domains_http = this.DOMAINS_TO_OPTIMIZE_HTTP if this.ENABLE_JS_SUBSTITUTE else [] %}\n{% set extra_domains_https = this.DOMAINS_TO_OPTIMIZE_HTTPS if this.ENABLE_JS_SUBSTITUTE else [] %}\n\n# HTTP static content servers\n{{ _common_static_servers(this, this.DOMAINS_TO_PROXY_HTTP, extra_domains_http, \"http\") }}\n\n{% if not this.ENABLE_HTTPS %}\n  # HTTPS static content servers\n  {{ _common_static_servers(this, this.DOMAINS_TO_PROXY_HTTPS, extra_domains_https, \"https\") }}\n{% endif %}\n\n{{ _common_proxy_config_step2(this, co_profiles_mod, co_profiles, this.REV_PROFILES_BASE_PORT_HTTP, false) }}\n\n# Optional customizations after generic BP config\n{{ caller(False) }}\n{{ this.CUSTOM_WEBSERVER_CODE_AFTER|extract_custom_webserver_code(\"NGINX\") }}\n# End optional customizations after generic BP config\n}\n{% endif %}{# this.ENABLE_HTTP #}\n\n{% if this.ENABLE_HTTPS %}\n  {{ _common_upstream_block_co(this, \"bp_cos_bypass\", \"B\", this.REV_PROFILES_BASE_PORT_HTTPS, true) }}{# same balancer name as _common_co_location_params #}\n  {{ _common_upstream_block_co(this, \"bp_cos\", \"\", this.REV_PROFILES_BASE_PORT_HTTPS, true) }}{# same balancer name as _common_co_location_params #}\n  {% if this.ENABLE_VARNISH %}\n    {{ _common_upstream_block_varnish(this, 8443, true) }}\n  {% endif %}\n  {{ balancer_mod.define_bp_ows_balancer(this, true) }}\n  server {\n  listen 443 ssl{{ \" spdy\" if this.ENABLE_SPDY else \"\" }};\n\n  {% if this.ENABLE_VARNISH and not this.BYPASS_VARNISH_LOCATIONS %}\n    {{ ssl_mod.setup_no_proxy(this.ssl) }}\n  {% else %}{# If this.BYPASS_VARNISH_LOCATIONS is true, we need SSL proxy support for direct connections to CO #}\n    {{ ssl_mod.setup(this.ssl) }}\n  {% endif %}\n\n  # OCSP stapling is only enabled on the BP\n  # TODO: SSLUseStapling on\n  # TODO: SSLStaplingResponderTimeout 5\n  # TODO: SSLStaplingReturnResponderErrors off\n\n  {% if this.ENABLE_VARNISH %}\n    {{ _common_proxy_config_step1(this, co_profiles_mod, co_profiles, 8443, this.REV_PROFILES_BASE_PORT_HTTPS, true) }}\n    {{ _common_frontend(this) }}\n    }\n\n    server {\n    listen 127.0.0.1:9443;\n    {{ ssl_mod.setup_proxy_only(this.ssl) }}\n\n    # Don't log accesses on this vhost; they all come from localhost\n    access_log off;\n\n    # Make sure the connections between Varnish and BP are kept alive for 10 minutes\n    keepalive_timeout 600s;\n  {% else %}{# not this.ENABLE_VARNISH #}\n    {{ _common_frontend(this) }}\n  {% endif %}{# this.ENABLE_VARNISH #}\n  # Optional customizations before generic BP config\n  {{ caller(True) }}\n  # End optional customizations before generic BP config\n\n  {% set extra_domains_http = this.DOMAINS_TO_OPTIMIZE_HTTP if this.ENABLE_JS_SUBSTITUTE else [] %}\n  {% set extra_domains_https = this.DOMAINS_TO_OPTIMIZE_HTTPS if this.ENABLE_JS_SUBSTITUTE else [] %}\n\n  # HTTP static content servers\n  {{ _common_static_servers(this, this.DOMAINS_TO_PROXY_HTTP, extra_domains_http, \"http\") }}\n\n  # HTTPS static content servers\n  {{ _common_static_servers(this, this.DOMAINS_TO_PROXY_HTTPS, extra_domains_https, \"https\") }}\n\n  {{ _common_proxy_config_step2(this, co_profiles_mod, co_profiles, this.REV_PROFILES_BASE_PORT_HTTPS, true) }}\n\n  # mod_pagespeed in CO looks at this header when optimizing for SPDY\n  # TODO: RequestHeader add X-PSA-Optimize-For-SPDY On\n\n  # Optional customizations after generic BP config\n  {{ caller(False) }}\n  {{ this.CUSTOM_WEBSERVER_CODE_AFTER|extract_custom_webserver_code(\"NGINX\") }}\n  # End optional customizations after generic BP config\n  }\n{% endif %}{# this.ENABLE_HTTPS #}\n\n{% else %}{# this.SECURITY_MODE == \"block\", which means \"block access for everybody\" #}\n\n  {% if this.ENABLE_HTTP %}\n    server {\n    listen 80;\n    deny all;\n    }\n  {% endif %}{# this.ENABLE_HTTP #}\n  {% if this.ENABLE_HTTPS %}\n    server {\n    listen 443;\n    deny all;\n    }\n  {% endif %}{# this.ENABLE_HTTPS #}\n\n{% endif %}{# this.SECURITY_MODE != \"block\" #}\n\n{%- endmacro %}\n", 
          "common/third_party.jinja": "{% macro replace_urls(this, proto, has_pagespeed) %}\n{% \tset preserve_https = this.ENABLE_HTTP and this.ENABLE_HTTPS %}\n{% \tif preserve_https %}\n{%  \tset https_proto = \"https\" %}\n{%  \tset https_url_prefix = \"https://\" + this.SERVER_NAME if proto != \"https\" else \"\" %}\n{% \telse %}\n{%  \tset https_proto = proto %}\n{%  \tset https_url_prefix = \"\" %}\n{% \tendif %}\n\n{% \tif this.DOMAINS_TO_PROXY_HTTP %}\n{%  \tfor host in this.DOMAINS_TO_PROXY_HTTP %}\n{% \t\t\tif has_pagespeed %}\n    # TODO: ModPagespeedMapProxyDomain {{proto}}://{{this.SERVER_NAME}}/rev-ps-http-{{host}} http://{{host}}\n{%  \t\tendif %}\n    # Make sure absolute URLs pointing to the server go through us instead\n    subs_filter ([\\\"'])(http:)?//{{host}} $1/rev-third-party-http/{{host}} r;\n{%  \tendfor %}\n{% \tendif %}\n\n{% \tif this.DOMAINS_TO_PROXY_HTTPS %}\n{%  \tfor host in this.DOMAINS_TO_PROXY_HTTPS %}\n{% \t\t\tif has_pagespeed %}\n    # TODO: ModPagespeedMapProxyDomain {{https_proto}}://{{this.SERVER_NAME}}/rev-ps-https-{{host}} https://{{host}}\n{%  \t\tendif %}\n    # Make sure absolute URLs pointing to the server go through us instead\n    subs_filter ([\\\"'])(https:)?//{{host}} $1{{https_url_prefix}}/rev-third-party-https/{{host}} r;\n{%  \tendfor %}\n{% \tendif %}\n\n{% \tif this.ENABLE_JS_SUBSTITUTE %}\n    # JS substitute must be the first script we load\n    subs_filter <head([^>]*)> \"<head$1><script>var revJSSubst={nshards:{{this.DOMAIN_SHARDS_COUNT}},domains:{\n{%- \tset first=True -%}\n{%- \tfor host in this.DOMAINS_TO_OPTIMIZE_HTTP %}{{ \"\" if first else \",\" }}'{{\"http://\" if not host in this.DOMAINS_TO_OPTIMIZE_HTTPS else \"\"}}{{host}}':1{% set first=False %}{% endfor -%}\n{%- \tset first=False if this.DOMAINS_TO_OPTIMIZE_HTTP else True -%}\n{%- \tfor host in this.DOMAINS_TO_OPTIMIZE_HTTPS %}{% if not host in this.DOMAINS_TO_OPTIMIZE_HTTP %}{{ \"\" if first else \",\" }}'https://{{host}}':1{% set first=False %}{% endif %}{% endfor -%}\n    },keep_https:{{ \"1\" if preserve_https else \"0\" }}};</script><script src='/rev-js/rev-js-substitute.min.js'></script>\" r;\n{% \t\tif has_pagespeed %}\n    pagespeed Disallow \"{{proto}}://{{this.SERVER_NAME}}/rev-js/*\";\n{%  \tendif %}\n{% \tendif %}{# ENABLE_JS_SUBSTITUTE #}\n\n{% endmacro %}"
        }
      }, 
      "varnish_config_vars": {
        "ENABLE_GEOIP_HEADERS": false, 
        "CACHING_RULES_MODE": "best", 
        "CACHE_PS_HTML": false, 
        "CONTENT_OPTIMIZERS_HTTPS": [
          "localhost"
        ], 
        "ENABLE_ORIGIN_HEALTH_PROBE": false, 
        "DOMAINS_TO_PROXY_HTTP": [], 
        "SERVER_NAME": "generic-domain.1234", 
        "CLIENT_RESPONSE_TIMEOUT": 600, 
        "ENABLE_CACHE": true, 
        "BYPASS_CO_LOCATIONS": [], 
        "CONTENT_OPTIMIZERS_HTTP": [
          "localhost"
        ], 
        "DEBUG_MODE": false, 
        "CUSTOM_VCL": {
          "purge": "", 
          "hit": "", 
          "recv": "", 
          "pass": "", 
          "deliver": "", 
          "pipe": "", 
          "backend_fetch": "", 
          "backends": [], 
          "backend_error": "", 
          "synth": "", 
          "hash": "", 
          "backend_response": "", 
          "miss": ""
        }, 
        "INCLUDE_USER_AGENT": false, 
        "VERSION": 15, 
        "CUSTOM_VCL_ENABLED": false, 
        "CACHE_IGNORE_AUTH": false, 
        "CACHING_RULES": [
          {
            "url": {
              "value": "\\.(jpg|jpeg|png|gif|webp|js|css|woff)(\\?.*)?$", 
              "is_wildcard": false
            }, 
            "edge_caching": {
              "new_ttl": 0, 
              "override_no_cc": false, 
              "override_origin": false, 
              "query_string_list_is_keep": false, 
              "query_string_keep_or_remove_list": []
            }, 
            "cookies": {
              "remove_ignored_from_request": true, 
              "ignore_all": true, 
              "remove_ignored_from_response": true, 
              "override": true, 
              "list_is_keep": false, 
              "keep_or_ignore_list": []
            }, 
            "version": 2, 
            "browser_caching": {
              "new_ttl": 0, 
              "override_edge": false, 
              "force_revalidate": false
            }
          }
        ], 
        "ORIGIN_HEALTH_PROBE": {
          "HTTP_REQUEST": "", 
          "PROBE_TIMEOUT": 0, 
          "PROBE_INTERVAL": 0, 
          "HTTP_STATUS": 0
        }
      }, 
      "site_name": "generic-domain_1234", 
      "config_vars": {
        "co_profiles": {
          "REV_OPTIMIZATION_LEVEL": "custom", 
          "REV_CUSTOM_IMG_LEVEL": "medium", 
          "VERSION": 2, 
          "REV_CUSTOM_CSS_LEVEL": "medium", 
          "REV_CUSTOM_JS_LEVEL": "medium"
        }, 
        "bp": {
          "REV_PROFILES_BASE_PORT_HTTP": 18000, 
          "ENABLE_HTML_SUBSTITUTE": false, 
          "DOMAINS_TO_OPTIMIZE_HTTPS": [], 
          "BYPASS_CO_LOCATIONS": [], 
          "BYPASS_VARNISH_LOCATIONS": [], 
          "ENABLE_HTTPS": true, 
          "ORIGIN_REUSE_CONNS": true, 
          "REV_PROFILES_BASE_PORT_HTTPS": 19000, 
          "BLOCK_CRAWLERS": true, 
          "ENABLE_SPDY": true, 
          "SECURITY_MODE": "off", 
          "SERVER_NAME": "generic-domain.1234", 
          "ORIGIN_SERVERS_HTTPS": [
            "https://ows-generic-server.1234"
          ], 
          "SERVER_REGEX_ALIAS": "", 
          "REV_PROFILES_COUNT": 1, 
          "CONTENT_OPTIMIZERS_HTTPS": [
            "https://localhost"
          ], 
          "DOMAINS_TO_PROXY_HTTP": [], 
          "END_USER_RESPONSE_HEADERS": [], 
          "PROXY_TIMEOUT": 5, 
          "ssl": {}, 
          "CONTENT_OPTIMIZERS_HTTP": [
            "http://localhost"
          ], 
          "VERSION": 23, 
          "ORIGIN_SERVER_NAME": "ows-generic-domain.1234", 
          "ENABLE_JS_SUBSTITUTE": false, 
          "SERVER_ALIASES": [], 
          "ENABLE_VARNISH": true, 
          "DOMAINS_TO_OPTIMIZE_HTTP": [], 
          "ORIGIN_IDLE_TIMEOUT": 80, 
          "ENABLE_PROXY_BUFFERING": false, 
          "DOMAIN_SHARDS_COUNT": 0, 
          "CUSTOM_WEBSERVER_CODE_BEFORE": "", 
          "ORIGIN_SERVERS_HTTP": [
            "http://ows-generic-server.1234"
          ], 
          "ENABLE_VARNISH_GEOIP_HEADERS": false, 
          "acl": {
            "action": "allow_except", 
            "enabled": false, 
            "acl_rules": []
          }, 
          "DEBUG_MODE": false, 
          "CUSTOM_WEBSERVER_CODE_AFTER": "", 
          "ENABLE_HTTP": true, 
          "DOMAINS_TO_PROXY_HTTPS": []
        }
      }, 
      "type": "config"
    }
  ], 
  "version": 5, 
  "type": "apache"
}