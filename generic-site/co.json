{
  "commands": [
    {
      "templates": {
        "apache": {
          "main.vars.schema": "{\n  \"title\": \"Main web server config\", \n  \"required\": [\n    \"co\", \n    \"co_profiles\"\n  ], \n  \"additionalProperties\": false, \n  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n  \"type\": \"object\", \n  \"properties\": {\n    \"co_profiles\": {\n      \"additionalProperties\": false, \n      \"required\": [\n        \"VERSION\", \n        \"REV_OPTIMIZATION_LEVEL\", \n        \"REV_CUSTOM_IMG_LEVEL\", \n        \"REV_CUSTOM_JS_LEVEL\", \n        \"REV_CUSTOM_CSS_LEVEL\"\n      ], \n      \"type\": \"object\", \n      \"properties\": {\n        \"REV_OPTIMIZATION_LEVEL\": {\n          \"pattern\": \"min|med|max|adaptive|custom|none\", \n          \"type\": \"string\"\n        }, \n        \"REV_CUSTOM_IMG_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }, \n        \"VERSION\": {\n          \"minimum\": 2, \n          \"type\": \"integer\", \n          \"maximum\": 2\n        }, \n        \"REV_CUSTOM_CSS_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }, \n        \"REV_CUSTOM_JS_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }\n      }, \n      \"title\": \"Optimization profile - Fewer requests\"\n    }, \n    \"co\": {\n      \"additionalProperties\": false, \n      \"required\": [\n        \"VERSION\", \n        \"ssl\", \n        \"SERVER_NAME\", \n        \"ORIGIN_SERVER_NAME\", \n        \"REV_PROFILES_COUNT\", \n        \"ENABLE_HTTP\", \n        \"ENABLE_HTTPS\", \n        \"ORIGIN_SERVERS_HTTP\", \n        \"ORIGIN_SERVERS_HTTPS\", \n        \"DOMAINS_TO_PROXY_HTTP\", \n        \"DOMAINS_TO_PROXY_HTTPS\", \n        \"REV_PROFILES_BASE_PORT_HTTP\", \n        \"LISTEN_REV_PROFILES_BASE_PORT_HTTP\", \n        \"REV_PROFILES_BASE_PORT_HTTPS\", \n        \"LISTEN_REV_PROFILES_BASE_PORT_HTTPS\", \n        \"REV_RUM_BEACON_URL\", \n        \"DOMAIN_SHARDS_COUNT\", \n        \"ENABLE_OPTIMIZATION\", \n        \"ENABLE_JS_SUBSTITUTE\", \n        \"ENABLE_HTML_SUBSTITUTE\", \n        \"CUSTOM_WEBSERVER_CODE_AFTER\", \n        \"DEBUG_MODE\", \n        \"DOMAINS_TO_OPTIMIZE_HTTP\", \n        \"DOMAINS_TO_OPTIMIZE_HTTPS\", \n        \"PROXY_TIMEOUT\", \n        \"ORIGIN_IDLE_TIMEOUT\", \n        \"ORIGIN_REUSE_CONNS\", \n        \"ENABLE_PROXY_BUFFERING\", \n        \"ORIGIN_REQUEST_HEADERS\"\n      ], \n      \"type\": \"object\", \n      \"properties\": {\n        \"REV_PROFILES_BASE_PORT_HTTP\": {\n          \"minimum\": 0, \n          \"type\": \"integer\", \n          \"maximum\": 65000\n        }, \n        \"ENABLE_HTML_SUBSTITUTE\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAINS_TO_OPTIMIZE_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"PROXY_TIMEOUT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"ENABLE_HTTPS\": {\n          \"type\": \"boolean\"\n        }, \n        \"ORIGIN_REUSE_CONNS\": {\n          \"type\": \"boolean\"\n        }, \n        \"ENABLE_OPTIMIZATION\": {\n          \"type\": \"boolean\"\n        }, \n        \"SERVER_NAME\": {\n          \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$\", \n          \"type\": \"string\"\n        }, \n        \"ORIGIN_SERVERS_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"REV_RUM_BEACON_URL\": {\n          \"type\": \"string\", \n          \"anyOf\": [\n            {\n              \"format\": \"uri\"\n            }, \n            {\n              \"pattern\": \"\"\n            }\n          ]\n        }, \n        \"REV_PROFILES_COUNT\": {\n          \"minimum\": 1, \n          \"type\": \"integer\", \n          \"maximum\": 4\n        }, \n        \"REV_PROFILES_BASE_PORT_HTTPS\": {\n          \"minimum\": 0, \n          \"type\": \"integer\", \n          \"maximum\": 65000\n        }, \n        \"DOMAINS_TO_PROXY_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"LISTEN_REV_PROFILES_BASE_PORT_HTTPS\": {\n          \"type\": \"boolean\"\n        }, \n        \"ssl\": {\n          \"additionalProperties\": false, \n          \"type\": \"object\", \n          \"properties\": {}, \n          \"title\": \"SSL setup\"\n        }, \n        \"VERSION\": {\n          \"minimum\": 14, \n          \"type\": \"integer\", \n          \"maximum\": 14\n        }, \n        \"ORIGIN_SERVER_NAME\": {\n          \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$\", \n          \"type\": \"string\"\n        }, \n        \"ENABLE_JS_SUBSTITUTE\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAINS_TO_OPTIMIZE_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"LISTEN_REV_PROFILES_BASE_PORT_HTTP\": {\n          \"type\": \"boolean\"\n        }, \n        \"ORIGIN_IDLE_TIMEOUT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"ENABLE_PROXY_BUFFERING\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAIN_SHARDS_COUNT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"ORIGIN_SERVERS_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"DEBUG_MODE\": {\n          \"type\": \"boolean\"\n        }, \n        \"ORIGIN_REQUEST_HEADERS\": {\n          \"items\": {\n            \"type\": \"object\", \n            \"properties\": {\n              \"header_value\": {\n                \"type\": \"string\"\n              }, \n              \"operation\": {\n                \"type\": \"string\"\n              }, \n              \"header_name\": {\n                \"type\": \"string\"\n              }\n            }\n          }, \n          \"type\": \"array\"\n        }, \n        \"CUSTOM_WEBSERVER_CODE_AFTER\": {\n          \"type\": \"string\"\n        }, \n        \"ENABLE_HTTP\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAINS_TO_PROXY_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }\n      }, \n      \"title\": \"Content optimizer config\"\n    }\n  }\n}", 
          "common/loop_detect.jinja": "{% macro loop_detect(this) %}\n{%      set header_name = \"X-Rev-Nodes\" %}\n{%      set node_name = HOSTNAME_SHORT %}\n    # If we've already visited this server during this request, in the same role (BP or CO),\n    # return an error page and status 508 (loop detected).\n    RewriteEngine On\n    RewriteCond %{HTTP:{{header_name}}} {{node_name}}\n    RewriteRule ^(.*)$ - [R=508,L]\n    ErrorDocument 508 \"A redirection loop was detected on '{{node_name}}'. Please review the server configuration.\"\n    # Add this host to the request list of visited nodes\n    RequestHeader append {{header_name}} {{node_name}}\n{%      if this.DEBUG_MODE %}\n    # Add this host to the response list of visited nodes\n    Header append {{header_name}} {{node_name}}\n{%      endif %}\n{% endmacro %}{# loop_detect #}\n", 
          "co/co.jinja": "{% import \"common/ssl.jinja\" as ssl_mod %}\n{% import \"common/third_party.jinja\" as third_party_mod %}\n{% import \"common/loop_detect.jinja\" as loop_detect_mod %}\n\n{% macro _co_profile_factory(co_profiles_mod, co_profiles, index) -%}\n{% \t\tif index == 0 -%}\n{{ \t\t\tco_profiles_mod.profile0(co_profiles) }}\n{%  \telif index == 1 -%}\n{{     \t\tco_profiles_mod.profile1(co_profiles) }}\n{%  \telif index == 2 -%}\n{{     \t\tco_profiles_mod.profile2(co_profiles) }}\n{%  \telif index == 3 -%}\n{{     \t\tco_profiles_mod.profile3(co_profiles) }}\n{%  \telif index == 4 -%}\n{{     \t\tco_profiles_mod.profile4(co_profiles) }}\n{%  \telse %}\n\t# PROFILE OUT OF RANGE - using profile #0\n{{ \t\t\tco_profiles_mod.profile0(co_profiles) }}\n{%  \tendif %}\n{%- endmacro %}\n\n{% macro setup(this, co_profiles_mod, co_profiles) -%}\n{% \t\tset is_https = False %}\n{% \t\tset enable_pagespeed = this.ENABLE_OPTIMIZATION and co_profiles.REV_OPTIMIZATION_LEVEL|default(\"none\") != \"none\" %}\n{% \t\tfor enable in (this.ENABLE_HTTP, this.ENABLE_HTTPS) %}\n{% \t\t\tif enable %}\n{% \t\t\t\tfor p in range(this.REV_PROFILES_COUNT) %}\n# Profile #{{p}}\n{% \t\t\t\t\tset profile_port = (this.REV_PROFILES_BASE_PORT_HTTPS if is_https else this.REV_PROFILES_BASE_PORT_HTTP) + p %}\n{% \t\t\t\t\tset proto = \"https\" if is_https else \"http\" %}\n{% \t\t\t\t\tif (this.LISTEN_REV_PROFILES_BASE_PORT_HTTPS if is_https else this.LISTEN_REV_PROFILES_BASE_PORT_HTTP) %}\nListen {{profile_port}}\n{% \t\t\t\t\tendif %}\n<VirtualHost *:{{profile_port}}>\n    ServerName {{this.SERVER_NAME}}\n{% \t\t\t\t\tfor shard in range(this.DOMAIN_SHARDS_COUNT) %}\n    # Sharding alias\n    ServerAlias s{{shard}}-{{this.SERVER_NAME}}\n{% \t\t\t\t\tendfor %}\n\n{% \t\t\t\t\tif this.DEBUG_MODE %}\n    LogLevel trace6\n{% \t\t\t\t\tendif %}\n\n{{ \t\t\t\t\tloop_detect_mod.loop_detect(this) }}\n\n    # Optional customizations before generic options\n{{ \t\t\t\t\tcaller(True, is_https) }}\n    # End optional customizations before generic options\n\n{% \t\t\t\t\tif is_https %}\n{{  \t\t\t\t\tssl_mod.setup_bp_co(this.ssl) }}\n{% \t\t\t\t\telif this.ORIGIN_SERVERS_HTTPS %}\n    # Must enable SSL proxy support for HTTPS origin servers\n{{  \t\t\t\t\tssl_mod.setup_proxy_only(this.ssl) }}\n{% \t\t\t\t\tendif %}\n\n    # For RUM/Boomerang data and URL substitutions\n{% \t\t\t\t\tif enable_pagespeed %}\n    AddOutputFilterByType SUBSTITUTE text/html\n{% \t\t\t\t\telse %}\n    FilterDeclare decompress CONTENT_SET\n    FilterProvider decompress INFLATE \"%{CONTENT_TYPE} =~ m|^text/html| && %{REQUEST_METHOD} != 'HEAD'\"\n\n    FilterDeclare compress CONTENT_SET\n    FilterProvider compress DEFLATE \"%{CONTENT_TYPE} =~ m|^text/html| && %{REQUEST_METHOD} != 'HEAD'\"\n\n    FilterDeclare replace CONTENT_SET\n    FilterProvider replace SUBSTITUTE \"%{CONTENT_TYPE} =~ m|^text/html| && %{REQUEST_METHOD} != 'HEAD'\"\n\n    FilterChain =decompress replace compress\n{% \t\t\t\t\tendif %}\n\n{% \t\t\t\t\tset origins = this.ORIGIN_SERVERS_HTTPS if is_https else this.ORIGIN_SERVERS_HTTP %}\n    # Wait at most for this many seconds for reply from Origin, then return error message.\n    ProxyTimeout {{this.PROXY_TIMEOUT}}\n\n{%                  set proxy_params = \"keepalive=On\" + (\" ttl=\" + this.ORIGIN_IDLE_TIMEOUT|string if this.ORIGIN_IDLE_TIMEOUT and this.ORIGIN_REUSE_CONNS else \"\") + (\" disablereuse=On\" if not this.ORIGIN_REUSE_CONNS else \"\") %}\n{% \t\t\t\t\tif origins|length == 1 %}\n    ProxyPass / {{origins[0]}}/ retry=0 {{proxy_params}}\n    ProxyPassReverse / {{origins[0]}}/\n{% \t\t\t\t\telse %}{# origins|length == 1 #}\n    <Proxy balancer://co_ows>\n{% \t\t\t\t\t\tset route_no = 1 %}\n{% \t\t\t\t\t\tfor ows in origins %}\n        BalancerMember {{ows}} route={{route_no}} {{proxy_params}}\n{% \t\t\t\t\t\t\tset route_no = route_no + 1 %}\n{% \t\t\t\t\t\tendfor %}\n        ProxySet stickysession=ROUTEID\n    </Proxy>\n    ProxyPass / balancer://co_ows/\n    ProxyPassReverse / balancer://co_ows/\n{% \t\t\t\t\tendif %}\n    # Don't add X-Forwarded-For here, already added by BP\n    ProxyAddHeaders Off\n    # Make sure the origin sees the right Host header\n    ProxyPreserveHost On\n    ProxySSLHostname {{this.ORIGIN_SERVER_NAME}}\n    RequestHeader set Host {{this.ORIGIN_SERVER_NAME}}\n\n{% \t\t\t\t\tif enable_pagespeed %}\n    # Resources from these domains are candidates for optimization\n    ModPagespeedDomain {{this.SERVER_NAME}}\n    ModPagespeedMapOriginDomain {{proto}}://127.0.0.1:{{profile_port}} {{proto}}://{{this.SERVER_NAME}}\n{% \t\t\t\t\t\tfor ows in origins %}\n{% \t\t\t\t\t\t\tset host = ows|replace(\"://\",\"-\")|replace(\":\",\"-\")|replace(\"/\",\"-\") %}\n    ModPagespeedMapProxyDomain {{proto}}://{{this.SERVER_NAME}}/rev-ps-{{host}} {{ows}}\n{% \t\t\t\t\t\tendfor %}\n\n    # Faster locking means faster response time, see:\n    # http://www.webperformance.com/load-testing/blog/2012/12/google-pagespeed-performance-with-memory-locking/\n    ModPagespeedSharedMemoryLocks On\n\n    # Allow cacheable, but modified HTML to be cached by Varnish\n    # See: https://developers.google.com/speed/pagespeed/module/downstream-caching\n    ModPagespeedDownstreamCachePurgeLocationPrefix {{proto}}://{{this.SERVER_NAME}}\n    ModPagespeedDownstreamCachePurgeMethod PURGE\n    ModPagespeedDownstreamCacheRewrittenPercentageThreshold 95\n\n    # Disable all filters and start from scratch\n    ModPagespeedRewriteLevel PassThrough\n\n{% \t\t\t\t\t\tif this.DOMAIN_SHARDS_COUNT %}\n    # Apply domain mapping rules to all resources, even if not optimized by PS, to shard everything\n    ModPagespeedEnableFilters rewrite_domains\n    ModPagespeedShardDomain {{this.SERVER_NAME}} {% for shard in range(this.DOMAIN_SHARDS_COUNT) %}s{{shard}}-{{this.SERVER_NAME}},{% endfor %}\n{% \t\t\t\t\t\tendif %}\n\n{% \t\t\t\t\t\tif this.ENABLE_OPTIMIZATION %}\n    # Allow optimization of JS-referenced resources\n    ModPagespeedInPlaceResourceOptimization on\n\n    # Turn on browser-specific optimizations\n    ModPagespeedEnableFilters in_place_optimize_for_browser\n\n    # Customer profile settings\n{{ \t\t\t\t\t\t\t_co_profile_factory(co_profiles_mod, co_profiles, p) }}\n{% \t\t\t\t\t\tendif %}\n{% \t\t\t\t\telse %}{# enable_pagespeed #}\n    # Disable pagespeed\n    ModPagespeed Off\n{% \t\t\t\t\tendif %}{# enable_pagespeed #}\n\n    # Optional customizations after generic options\n{{ \t\t\t\t\tcaller(False, is_https) }}\n{{ \t\t\t\t\tthis.CUSTOM_APACHE_CODE_AFTER }}\n    # End optional customizations after generic options\n\n{%                  if this.SERVER_NAME != this.ORIGIN_SERVER_NAME %}\n    # Make sure absolute URLs pointing to the origin go through us instead\n{%                      if (this.ENABLE_HTTP and this.ENABLE_HTTPS) and not is_https %}{# both supported; must prevent conversion from secure to unsecure #}\n    # HTTPS links are turned into absolute ones to our own server\n    Substitute \"s|([\\\"'])https://{{this.ORIGIN_SERVER_NAME}}|$1https://{{this.SERVER_NAME}}|q\"\n    # HTTP links are turned into relative ones\n    Substitute \"s|([\\\"'])(http:)?//{{this.ORIGIN_SERVER_NAME}}|$1|q\"\n{%                      else %}{# only HTTP or only HTTPS #}\n    Substitute \"s|([\\\"'])(https?:)?//{{this.ORIGIN_SERVER_NAME}}|$1|q\"\n{%                      endif %}{# HTTP and/or HTTPS #}\n{%                  endif %}{# this.SERVER_NAME != this.ORIGIN_SERVER_NAME #}\n\n{{ \t\t\t\t\tthird_party_mod.replace_urls(this, proto, this.ENABLE_OPTIMIZATION) }}\n\n{%      \t\t\tif this.REV_RUM_BEACON_URL %}\n{%          \t\t\tset rum_beacon_url = this.REV_RUM_BEACON_URL if this.REV_RUM_BEACON_URL|truncate(4,True,\"\") == \"http\" else proto + \"://\" + this.REV_RUM_BEACON_URL %}\n    # RUM beacon\n    Substitute \"s|</head>|<script src='/rev-diablo/js/boomerang-rev.min.js'></script><script>BOOMR.init({RT:{cookie:'REV-RT', strict_referrer: false}, beacon_url: '{{rum_beacon_url}}'}); BOOMR.addVar('user_ip', '%{HTTP_X_FORWARDED_FOR}');</script></head>|q\"\n\n    ModPagespeedDisallow \"{{proto}}://{{this.SERVER_NAME}}/rev-diablo/*\"\n{%      \t\t\tendif %}\n</VirtualHost>\n{% \t\t\t\tendfor %}\n{% \t\t\tendif %}\n{% \t\t\tset is_https = True %}\n{% \t\tendfor %}\n{%- endmacro %}\n", 
          "co/standard_profiles/default_customer_profiles.jinja": "{% macro _base_filters(this) -%}\n    # Begin base filters\n    ModPagespeedEnableFilters add_head\n    ModPagespeedEnableFilters inline_import_to_link\n    ModPagespeedEnableFilters insert_ga\n    ModPagespeedEnableFilters remove_comments\n    ModPagespeedEnableFilters collapse_whitespace\n    ModPagespeedEnableFilters extend_cache\n    ModPagespeedEnableFilters extend_cache_pdfs\n    ModPagespeedEnableFilters remove_quotes\n    # We already use Boomerang, don't need this\n    #ModPagespeedEnableFilters add_instrumentation\n    ModPagespeedEnableFilters convert_meta_tags\n    ModPagespeedEnableFilters insert_dns_prefetch\n\n    # Allow AJAX loaded resources to be optimized\n    # See: https://developers.google.com/speed/pagespeed/module/system#ipro\n    ModPagespeedInPlaceResourceOptimization on\n\n    # Filters to lower bandwidth usage\n    ModPagespeedEnableFilters combine_heads\n    ModPagespeedEnableFilters elide_attributes\n    ModPagespeedEnableFilters trim_urls\n    # End base filters\n{%- endmacro %}\n\n{% macro profile_selection(this) -%}\n{% if this.REV_OPTIMIZATION_LEVEL == \"adaptive\" -%}\n    # TODO: implement\n{% endif %}\n    # Always use profile 0 by default\n    RevProfilesAddSelectionRule 0 1==1\n{%- endmacro %}\n\n{% macro _optimize_up_to_level(level) -%}\n{% if level == \"low\" %}\n{% set lvl = 1 %}\n{% elif level == \"medium\" %}\n{% set lvl = 2 %}\n{% elif level == \"high\" %}\n{% set lvl = 3 %}\n{% else %}\n{% set lvl = 0 %}\n{% endif %}\n{% if lvl >= 1 %}\n{{ caller(\"low\") }}\n{% endif %}\n{% if lvl >= 2 %}\n{{ caller(\"medium\") }}\n{% endif %}\n{% if lvl == 3 %}\n{{ caller(\"high\") }}\n{% endif %}\n{%- endmacro %}\n\n{% macro _custom_js_optimizations(js_level) -%}\n{% call(level) _optimize_up_to_level(js_level) %}\n{% if level == \"low\" -%}\n    # Begin custom JS optimizations - low\n# See this bug: https://code.google.com/p/modpagespeed/issues/detail?id=821\n#<ModPagespeedIf spdy>\n#    ModPagespeedEnableFilters outline_javascript\n#</ModPagespeedIf>\n    # End custom JS optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom JS optimizations - medium\n    ModPagespeedEnableFilters extend_cache_scripts\n    ModPagespeedEnableFilters rewrite_javascript\n    #ModPagespeedUseExperimentalJsMinifier On\n<ModPagespeedIf !spdy>\n    ModPagespeedEnableFilters inline_javascript\n</ModPagespeedIf>\n    # End custom JS optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom JS optimizations - high\n    ModPagespeedEnableFilters defer_javascript\n    ModPagespeedEnableFilters combine_javascript\n    # Don't let PageSpeed externalize JS - all JS files must pass through the BP\n    #ModPagespeedEnableFilters canonicalize_javascript_libraries\n    ModPagespeedEnableFilters make_google_analytics_async\n    # End custom JS optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_css_optimizations(css_level) -%}\n{% call(level) _optimize_up_to_level(css_level) %}\n{% if level == \"low\" -%}\n    # Begin custom CSS optimizations - low\n    ModPagespeedEnableFilters move_css_above_scripts\n    ModPagespeedEnableFilters move_css_to_head\n# See this bug: https://code.google.com/p/modpagespeed/issues/detail?id=821\n#<ModPagespeedIf spdy>\n#    ModPagespeedEnableFilters outline_css\n#</ModPagespeedIf>\n    ModPagespeedEnableFilters rewrite_style_attributes\n    # End custom CSS optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom CSS optimizations - medium\n    ModPagespeedEnableFilters extend_cache_css\n    ModPagespeedEnableFilters combine_css\n<ModPagespeedIf !spdy>\n    ModPagespeedEnableFilters inline_css\n</ModPagespeedIf>\n    ModPagespeedEnableFilters flatten_css_imports\n    ModPagespeedEnableFilters rewrite_css\n    ModPagespeedEnableFilters fallback_rewrite_css_urls\n    ModPagespeedEnableFilters rewrite_style_attributes_with_url\n    # End custom CSS optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom CSS optimizations - high\n<ModPagespeedIf !spdy>\n    ModPagespeedEnableFilters inline_google_font_css\n</ModPagespeedIf>\n    ModPagespeedEnableFilters prioritize_critical_css\n    # End custom CSS optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_img_optimizations(img_level) -%}\n{% call(level) _optimize_up_to_level(img_level) %}\n{% if level == \"low\" -%}\n    # Begin custom IMG optimizations - low\n    ModPagespeedEnableFilters insert_image_dimensions\n    ModPagespeedEnableFilters dedup_inlined_images\n    # End custom IMG optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom IMG optimizations - medium\n    ModPagespeedEnableFilters sprite_images\n    ModPagespeedEnableFilters extend_cache_images\n    ModPagespeedEnableFilters rewrite_images\n    #ModPagespeedEnableFilters convert_jpeg_to_progressive\n<ModPagespeedIf !spdy>\n    ModPagespeedEnableFilters inline_images\n</ModPagespeedIf>\n    ModPagespeedEnableFilters recompress_images\n    ModPagespeedEnableFilters recompress_jpeg\n    ModPagespeedEnableFilters recompress_png\n    ModPagespeedEnableFilters recompress_webp\n    ModPagespeedEnableFilters convert_gif_to_png\n    ModPagespeedEnableFilters strip_image_color_profile\n    ModPagespeedEnableFilters strip_image_meta_data\n    ModPagespeedEnableFilters resize_images\n    ModPagespeedEnableFilters resize_rendered_image_dimensions\n    ModPagespeedEnableFilters lazyload_images\n    ModPagespeedCriticalImagesBeaconEnabled Off\n\n    ModPagespeedImageRecompressionQuality 70\n    # End custom IMG optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom IMG optimizations - high\n    ModPagespeedEnableFilters convert_png_to_jpeg\n    # webp conversion is costly and not all browsers support webp\n    #ModPagespeedEnableFilters convert_jpeg_to_webp\n    #ModPagespeedEnableFilters inline_preview_images\n    ModPagespeedEnableFilters resize_mobile_images\n    # End custom IMG optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_optimizations(this) -%}\n    # Optimization level: Custom\n    {{_custom_js_optimizations(this.REV_CUSTOM_JS_LEVEL)}}\n    {{_custom_css_optimizations(this.REV_CUSTOM_CSS_LEVEL)}}\n    {{_custom_img_optimizations(this.REV_CUSTOM_IMG_LEVEL)}}\n    # End optimization level: Custom\n{%- endmacro %}\n\n{% macro _level_optimizations(level) -%}\n    # Optimization level: {{level}}\n    {{_custom_js_optimizations(level)}}\n    {{_custom_css_optimizations(level)}}\n    {{_custom_img_optimizations(level)}}\n    # End optimization level: {{level}}\n{%- endmacro %}\n\n{% macro profile0(this) -%}\n    {{_base_filters()}}\n{% if this.REV_OPTIMIZATION_LEVEL == \"min\" %}\n    {{_level_optimizations(\"low\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"med\" %}\n    {{_level_optimizations(\"medium\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"max\" %}\n    {{_level_optimizations(\"high\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"custom\" %}\n    {{_custom_optimizations(this)}}\n{% else %}{# including \"adaptive\", where profile0 means \"don't optimize\" #}\n    # Optimizations turned off\n{% endif %}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile1(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"low\")}}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile2(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"medium\")}}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile3(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"high\")}}\n    # End optimizations\n{%- endmacro %}\n", 
          "common/ssl.jinja": "{% set ssl_ciphers = \"\\\"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA 3DES RC4 !aNULL !eNULL !LOW !MD5 !EXP !PSK !SRP !DSS +3DES 3DES +RC4 RC4\\\"\" %}\n\n{% macro _do_setup_no_proxy(this, cert_dir) %}\n    SSLEngine On\n    # Disable SSLv2/3 because of SNI, which requires TLS\n    SSLProtocol All -SSLv2 -SSLv3\n    # Mitigate CRIME attack\n    SSLCompression off\n    # Use stronger ciphers, which may mitigate BEAST attacks\n    SSLHonorCipherOrder on\n    SSLCipherSuite {{ssl_ciphers}}\n    SSLCACertificateFile {{cert_dir}}/ca-bundle.crt\n    SSLCertificateFile {{cert_dir}}/server.crt\n    SSLCertificateKeyFile {{cert_dir}}/server.key\n{%- endmacro %}\n\n{% macro _do_setup_proxy_only(this) %}\n    SSLProxyEngine On\n    # Disable SSLv2/3 because of SNI, which requires TLS\n    SSLProxyProtocol All -SSLv2 -SSLv3\n    SSLProxyCipherSuite {{ssl_ciphers}}\n    SSLProxyCheckPeerName Off\n    SSLProxyCheckPeerCN Off\n{%- endmacro %}\n\n{% macro setup_no_proxy(this) %}\n    # Begin SSL setup (no proxy)\n{{  _do_setup_no_proxy(this, \"/opt/revsw-config/apache/\" + GLOBAL_SITE_NAME + \"/certs\") }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup_proxy_only(this) %}\n    # Begin SSL setup (proxy-only)\n{{  _do_setup_proxy_only(this) }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup(this) %}\n    # Begin SSL setup\n{{  _do_setup_no_proxy(this, \"/opt/revsw-config/apache/\" + GLOBAL_SITE_NAME + \"/certs\") }}\n{{  _do_setup_proxy_only(this) }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup_bp_co(this) %}\n    # Begin SSL setup\n{{  _do_setup_no_proxy(this, \"/opt/revsw-config/apache/co-certs\") }}\n{{  _do_setup_proxy_only(this) }}\n    # End SSL setup\n{%- endmacro %}\n", 
          "main.jinja": "\n{% import \"co/standard_profiles/default_customer_profiles.jinja\" as co_profiles_mod %}\n{% import \"co/co.jinja\" as co_mod %}\n\n{% call(before, is_https) co_mod.setup(co, co_profiles_mod, co_profiles) %}\n{% endcall %}\n", 
          "common/third_party.jinja": "{% macro replace_urls(this, proto, has_pagespeed) %}\n{% \tset preserve_https = this.ENABLE_HTTP and this.ENABLE_HTTPS %}\n{% \tif preserve_https %}\n{%  \tset https_proto = \"https\" %}\n{%  \tset https_url_prefix = \"https://\" + this.SERVER_NAME if proto != \"https\" else \"\" %}\n{% \telse %}\n{%  \tset https_proto = proto %}\n{%  \tset https_url_prefix = \"\" %}\n{% \tendif %}\n\n{% \tif this.DOMAINS_TO_PROXY_HTTP %}\n    # Third-party HTTP-only static servers go through Varnish directly\n{%  \tfor host in this.DOMAINS_TO_PROXY_HTTP %}\n{% \t\t\tif has_pagespeed %}\n    ModPagespeedMapProxyDomain {{proto}}://{{this.SERVER_NAME}}/rev-ps-http-{{host}} http://{{host}}\n{%  \t\tendif %}\n    # Make sure absolute URLs pointing to the server go through us instead\n    Substitute \"s|([\\\"'])(http:)?//{{host}}|$1/rev-third-party-http/{{host}}|q\"\n{%  \tendfor %}\n{% \tendif %}\n\n{% \tif this.DOMAINS_TO_PROXY_HTTPS %}\n    # Third-party HTTPS-only static servers go through Apache, then Varnish\n{%  \tfor host in this.DOMAINS_TO_PROXY_HTTPS %}\n{% \t\t\tif has_pagespeed %}\n    ModPagespeedMapProxyDomain {{https_proto}}://{{this.SERVER_NAME}}/rev-ps-https-{{host}} https://{{host}}\n{%  \t\tendif %}\n    # Make sure absolute URLs pointing to the server go through us instead\n    Substitute \"s|([\\\"'])(https:)?//{{host}}|$1{{https_url_prefix}}/rev-third-party-https/{{host}}|q\"\n{%  \tendfor %}\n{% \tendif %}\n\n{% \tif this.ENABLE_JS_SUBSTITUTE %}\n    # JS substitute must be the first script we load\n    Substitute \"s|<head([^>]*)>|<head$1><script>var revJSSubst={nshards:{{this.DOMAIN_SHARDS_COUNT}},domains:{\n{%- \tset first=True -%}\n{%- \tfor host in this.DOMAINS_TO_OPTIMIZE_HTTP %}{{ \"\" if first else \",\" }}'{{\"http://\" if not host in this.DOMAINS_TO_OPTIMIZE_HTTPS else \"\"}}{{host}}':1{% set first=False %}{% endfor -%}\n{%- \tset first=False if this.DOMAINS_TO_OPTIMIZE_HTTP else True -%}\n{%- \tfor host in this.DOMAINS_TO_OPTIMIZE_HTTPS %}{% if not host in this.DOMAINS_TO_OPTIMIZE_HTTP %}{{ \"\" if first else \",\" }}'https://{{host}}':1{% set first=False %}{% endif %}{% endfor -%}\n    },keep_https:{{ \"1\" if preserve_https else \"0\" }}};</script><script src='/rev-js/rev-js-substitute.min.js'></script>|q\"\n{% \t\tif has_pagespeed %}\n    ModPagespeedDisallow \"{{proto}}://{{this.SERVER_NAME}}/rev-js/*\"\n{%  \tendif %}\n{% \tendif %}{# ENABLE_JS_SUBSTITUTE #}\n\n{% endmacro %}"
        }, 
        "nginx": {
          "common/balancer.jinja": "{% macro balancer_name(this, is_https, prefix) -%}\n{{ prefix }}_{{this.SERVER_NAME|underscore_url}}_{{\"https\" if is_https else \"http\"}}\n{%- endmacro %}\n\n\n{% macro _common_ows_balancer_params(this, is_https) %}\n{%      set origins = this.ORIGIN_SERVERS_HTTPS if is_https else this.ORIGIN_SERVERS_HTTP %}\n{%      set proxy_params = \"keepalive=On\" + (\" ttl=\" + this.ORIGIN_IDLE_TIMEOUT|string if this.ORIGIN_IDLE_TIMEOUT and this.ORIGIN_REUSE_CONNS else \"\") + (\" disablereuse=On\" if not this.ORIGIN_REUSE_CONNS else \"\") %}\n    # TODO: convert Apache proxy params: {{ proxy_params }}\n\n    # TODO: this is Nginx Plus-only, so we have to use ip_hash instead: sticky cookie ROUTEID expires=1h;\n    ip_hash;\n    dynamic_resolve fallback=stale fail_timeout=30s; # must be added AFTER ip_hash\n    keepalive 32;   # keep N connections alive\n{%      for ows in origins %}\n{% \t\t\tset scheme, hostname, port, path = ows|parse_url %}\n    server {{ hostname + \":\" + port|string }} max_fails=0 fail_timeout=0;\n{%      endfor %}\n{%- endmacro %}{# _common_ows_balancer_params #}\n\n\n{% macro define_bp_ows_balancer(this, is_https) %}\n{%  if this.BYPASS_CO_LOCATIONS %}\n# Balancer to bypass CO for certain URLs\nupstream {{ balancer_name(this, is_https, \"bp_ows\") }} {\n{{ \t\t_common_ows_balancer_params(this, is_https) }}\n}\n{%  endif %}\n{%- endmacro %}{# define_bp_ows_balancer #}\n\n\n{% macro define_co_ows_balancer(this, is_https) %}\n# Origin servers balancer\nupstream {{ balancer_name(this, is_https, \"co_ows\") }} {\n{{ \t\t_common_ows_balancer_params(this, is_https) }}\n}\n{%- endmacro %}{# define_co_ows_balancer #}\n", 
          "main.vars.schema": "{\n  \"title\": \"Main web server config\", \n  \"required\": [\n    \"co\", \n    \"co_profiles\"\n  ], \n  \"additionalProperties\": false, \n  \"$schema\": \"http://json-schema.org/draft-04/schema#\", \n  \"type\": \"object\", \n  \"properties\": {\n    \"co_profiles\": {\n      \"additionalProperties\": false, \n      \"required\": [\n        \"VERSION\", \n        \"REV_OPTIMIZATION_LEVEL\", \n        \"REV_CUSTOM_IMG_LEVEL\", \n        \"REV_CUSTOM_JS_LEVEL\", \n        \"REV_CUSTOM_CSS_LEVEL\"\n      ], \n      \"type\": \"object\", \n      \"properties\": {\n        \"REV_OPTIMIZATION_LEVEL\": {\n          \"pattern\": \"min|med|max|adaptive|custom|none\", \n          \"type\": \"string\"\n        }, \n        \"REV_CUSTOM_IMG_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }, \n        \"VERSION\": {\n          \"minimum\": 2, \n          \"type\": \"integer\", \n          \"maximum\": 2\n        }, \n        \"REV_CUSTOM_CSS_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }, \n        \"REV_CUSTOM_JS_LEVEL\": {\n          \"pattern\": \"low|medium|high|none\", \n          \"type\": \"string\"\n        }\n      }, \n      \"title\": \"Optimization profile - Fewer requests\"\n    }, \n    \"co\": {\n      \"additionalProperties\": false, \n      \"required\": [\n        \"VERSION\", \n        \"ssl\", \n        \"SERVER_NAME\", \n        \"ORIGIN_SERVER_NAME\", \n        \"REV_PROFILES_COUNT\", \n        \"ENABLE_HTTP\", \n        \"ENABLE_HTTPS\", \n        \"ORIGIN_SERVERS_HTTP\", \n        \"ORIGIN_SERVERS_HTTPS\", \n        \"DOMAINS_TO_PROXY_HTTP\", \n        \"DOMAINS_TO_PROXY_HTTPS\", \n        \"REV_PROFILES_BASE_PORT_HTTP\", \n        \"LISTEN_REV_PROFILES_BASE_PORT_HTTP\", \n        \"REV_PROFILES_BASE_PORT_HTTPS\", \n        \"LISTEN_REV_PROFILES_BASE_PORT_HTTPS\", \n        \"REV_RUM_BEACON_URL\", \n        \"DOMAIN_SHARDS_COUNT\", \n        \"ENABLE_OPTIMIZATION\", \n        \"ENABLE_JS_SUBSTITUTE\", \n        \"ENABLE_HTML_SUBSTITUTE\", \n        \"CUSTOM_WEBSERVER_CODE_AFTER\", \n        \"DEBUG_MODE\", \n        \"DOMAINS_TO_OPTIMIZE_HTTP\", \n        \"DOMAINS_TO_OPTIMIZE_HTTPS\", \n        \"PROXY_TIMEOUT\", \n        \"ORIGIN_IDLE_TIMEOUT\", \n        \"ORIGIN_REUSE_CONNS\", \n        \"ENABLE_PROXY_BUFFERING\", \n        \"ORIGIN_REQUEST_HEADERS\"\n      ], \n      \"type\": \"object\", \n      \"properties\": {\n        \"REV_PROFILES_BASE_PORT_HTTP\": {\n          \"minimum\": 0, \n          \"type\": \"integer\", \n          \"maximum\": 65000\n        }, \n        \"ENABLE_HTML_SUBSTITUTE\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAINS_TO_OPTIMIZE_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"PROXY_TIMEOUT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"ENABLE_HTTPS\": {\n          \"type\": \"boolean\"\n        }, \n        \"ORIGIN_REUSE_CONNS\": {\n          \"type\": \"boolean\"\n        }, \n        \"ENABLE_OPTIMIZATION\": {\n          \"type\": \"boolean\"\n        }, \n        \"SERVER_NAME\": {\n          \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$\", \n          \"type\": \"string\"\n        }, \n        \"ORIGIN_SERVERS_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"REV_RUM_BEACON_URL\": {\n          \"type\": \"string\", \n          \"anyOf\": [\n            {\n              \"format\": \"uri\"\n            }, \n            {\n              \"pattern\": \"\"\n            }\n          ]\n        }, \n        \"REV_PROFILES_COUNT\": {\n          \"minimum\": 1, \n          \"type\": \"integer\", \n          \"maximum\": 4\n        }, \n        \"REV_PROFILES_BASE_PORT_HTTPS\": {\n          \"minimum\": 0, \n          \"type\": \"integer\", \n          \"maximum\": 65000\n        }, \n        \"DOMAINS_TO_PROXY_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"LISTEN_REV_PROFILES_BASE_PORT_HTTPS\": {\n          \"type\": \"boolean\"\n        }, \n        \"ssl\": {\n          \"additionalProperties\": false, \n          \"type\": \"object\", \n          \"properties\": {}, \n          \"title\": \"SSL setup\"\n        }, \n        \"VERSION\": {\n          \"minimum\": 14, \n          \"type\": \"integer\", \n          \"maximum\": 14\n        }, \n        \"ORIGIN_SERVER_NAME\": {\n          \"pattern\": \"^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$\", \n          \"type\": \"string\"\n        }, \n        \"ENABLE_JS_SUBSTITUTE\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAINS_TO_OPTIMIZE_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"LISTEN_REV_PROFILES_BASE_PORT_HTTP\": {\n          \"type\": \"boolean\"\n        }, \n        \"ORIGIN_IDLE_TIMEOUT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"ENABLE_PROXY_BUFFERING\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAIN_SHARDS_COUNT\": {\n          \"minimum\": 0, \n          \"type\": \"integer\"\n        }, \n        \"ORIGIN_SERVERS_HTTP\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }, \n        \"DEBUG_MODE\": {\n          \"type\": \"boolean\"\n        }, \n        \"ORIGIN_REQUEST_HEADERS\": {\n          \"items\": {\n            \"type\": \"object\", \n            \"properties\": {\n              \"header_value\": {\n                \"type\": \"string\"\n              }, \n              \"operation\": {\n                \"type\": \"string\"\n              }, \n              \"header_name\": {\n                \"type\": \"string\"\n              }\n            }\n          }, \n          \"type\": \"array\"\n        }, \n        \"CUSTOM_WEBSERVER_CODE_AFTER\": {\n          \"type\": \"string\"\n        }, \n        \"ENABLE_HTTP\": {\n          \"type\": \"boolean\"\n        }, \n        \"DOMAINS_TO_PROXY_HTTPS\": {\n          \"items\": {\n            \"type\": \"string\", \n            \"format\": \"uri\"\n          }, \n          \"type\": \"array\"\n        }\n      }, \n      \"title\": \"Content optimizer config\"\n    }\n  }\n}", 
          "common/loop_detect.jinja": "{% macro loop_detect(this) %}\n{%      set header_name = \"X-Rev-Nodes\" %}\n{%      set header_name_var = \"http_x_rev_nodes\" %}\n{%      set node_name = HOSTNAME_SHORT %}\n    # If we've already visited this server during this request, in the same role (BP or CO),\n    # return an error page and status 508 (loop detected).\n    if (${{ header_name_var }} ~ {{node_name}}) {\n        return 508 \"A redirection loop was detected on '{{node_name}}'. Please review the server configuration.\";\n    }\n    # Add this host to the request list of visited nodes\n    proxy_set_header {{header_name}} \"${{\"{\"}}{{ header_name_var }}{{\"}\"}} {{node_name}}\";\n{%      if this.DEBUG_MODE %}\n    # Add this host to the response list of visited nodes\n    add_header {{header_name}} \"${{\"{\"}}{{ header_name_var }}{{\"}\"}} {{node_name}}\";\n{%      endif %}\n{% endmacro %}{# loop_detect #}\n", 
          "co/co.jinja": "{% import \"common/ssl.jinja\" as ssl_mod %}\n{% import \"common/third_party.jinja\" as third_party_mod %}\n{% import \"common/loop_detect.jinja\" as loop_detect_mod %}\n{% import \"common/balancer.jinja\" as balancer_mod %}\n\n{% macro _co_profile_factory(co_profiles_mod, co_profiles, index) -%}\n  {% \t\tif index == 0 -%}\n  {{ \t\t\tco_profiles_mod.profile0(co_profiles) }}\n  {%  \telif index == 1 -%}\n  {{     \t\tco_profiles_mod.profile1(co_profiles) }}\n  {%  \telif index == 2 -%}\n  {{     \t\tco_profiles_mod.profile2(co_profiles) }}\n  {%  \telif index == 3 -%}\n  {{     \t\tco_profiles_mod.profile3(co_profiles) }}\n  {%  \telif index == 4 -%}\n  {{     \t\tco_profiles_mod.profile4(co_profiles) }}\n  {%  \telse %}\n  # PROFILE OUT OF RANGE - using profile #0\n  {{ \t\t\tco_profiles_mod.profile0(co_profiles) }}\n  {%  \tendif %}\n{%- endmacro %}\n\n{% macro setup(this, co_profiles_mod, co_profiles) -%}\n  {% \t\tset is_https = False %}\n  {% \t\tset enable_pagespeed = this.ENABLE_OPTIMIZATION and co_profiles.REV_OPTIMIZATION_LEVEL|default(\"none\") != \"none\" %}\n  {% \t\tfor enable in (this.ENABLE_HTTP, this.ENABLE_HTTPS) %}\n  {% \t\t\tif enable %}\n  {% \t\t\t\tfor p in range(this.REV_PROFILES_COUNT) %}\n  # Profile #{{p}}\n  {% \t\t\t\t\tset profile_port = (this.REV_PROFILES_BASE_PORT_HTTPS if is_https else this.REV_PROFILES_BASE_PORT_HTTP) + p %}\n  {% \t\t\t\t\tset proto = \"https\" if is_https else \"http\" %}\n  {{                  balancer_mod.define_co_ows_balancer(this, is_https) }}\n  server {\n  listen {{profile_port}};\n  server_name {{this.SERVER_NAME}}{% for shard in range(this.DOMAIN_SHARDS_COUNT) %} s{{shard}}-{{this.SERVER_NAME}}{% endfor %};\n\n  {% \t\t\t\t\tif this.DEBUG_MODE %}\n  # Per-vhost log while in debug mode\n  error_log /var/log/nginx/{{this.SERVER_NAME}}.error debug;\n  {% \t\t\t\t\tendif %}\n\n  {{ \t\t\t\t\tloop_detect_mod.loop_detect(this) }}\n\n  # By default 1.0, not good for keepalives\n  proxy_http_version 1.1;\n  # Don't cut the cord to the backend every time a client disconnects\n  proxy_ignore_client_abort on;\n  {%  if not this.ENABLE_PROXY_BUFFERING %}\n    # We want to serve data to clients right away\n    proxy_buffering off;\n  {%  endif %}\n\n\n  # BEGIN: (BP-92) Request and response headers\n  {% if this.ORIGIN_REQUEST_HEADERS %}\n    {% for key in this.ORIGIN_REQUEST_HEADERS %}\n      {% if key.operation == \"add\" %}\n      \tmore_set_headers {{ key.header_name }}:{{ key.header_value}};\n      {% endif %}\n      {% if key.operation == \"delete\" %}\n      \tmore_clear_headers {{ key.header_name }};\n      {% endif %}\n      {% if key.operation == \"replace\" %}\n\tmore_clear_headers {{ key.header_name }};\n      \tmore_set_headers {{ key.header_name }}:{{ key.header_value}};\n      {% endif %}\n    {% endfor %}\n  {% endif %}\n  # END: (BP-92)\n\n\n  # Don't propagate \"Connection: close\" from client\n  proxy_set_header Connection \"\";\n\n  # Optional customizations before generic options\n  {{ \t\t\t\t\tcaller(True, is_https) }}\n  # End optional customizations before generic options\n\n  {% \t\t\t\t\tif is_https %}\n  {{  \t\t\t\t\tssl_mod.setup_bp_co(this.ssl) }}\n  {% \t\t\t\t\telif this.ORIGIN_SERVERS_HTTPS %}\n  # Must enable SSL proxy support for HTTPS origin servers\n  {{  \t\t\t\t\tssl_mod.setup_proxy_only(this.ssl) }}\n  {% \t\t\t\t\tendif %}\n\n  {%                  if not enable_pagespeed %}\n    # For RUM/Boomerang data and URL substitutions - the subs filter works on uncompressed data\n    gzip_proxied any;\n    gunzip on;\n    gunzip_always on;\n  {%                  endif %}\n\n  {% \t\t\t\t\tset origins = this.ORIGIN_SERVERS_HTTPS if is_https else this.ORIGIN_SERVERS_HTTP %}\n  # Wait at most for this many seconds for reply from Origin, then return error message.\n  proxy_read_timeout {{this.PROXY_TIMEOUT}}s;\n\n  {%                  set proxy_params = \"keepalive=On\" + (\" ttl=\" + this.ORIGIN_IDLE_TIMEOUT|string if this.ORIGIN_IDLE_TIMEOUT and this.ORIGIN_REUSE_CONNS else \"\") + (\" disablereuse=On\" if not this.ORIGIN_REUSE_CONNS else \"\") %}\n  {%                  set ows_proto = \"https\" if origins[0]|truncate(5, True, \"\") == \"https\" else \"http\" %}\n  location / {\n  # TODO: make 'lowercase_escapes' configurable - this is only useful for Metacafe now\n  proxy_pass {{ows_proto}}://{{ balancer_mod.balancer_name(this, is_https, \"co_ows\") }}/ lowercase_escapes; # TODO: retry=0 {{proxy_params}}\n  }\n\n  # Make sure the origin sees the right Host header\n  proxy_ssl_name {{this.ORIGIN_SERVER_NAME}};\n  proxy_set_header Host  {{this.ORIGIN_SERVER_NAME}};\n\n  {% \t\t\t\t\tif enable_pagespeed %}\n  # Enable PageSpeed module\n  pagespeed on;\n\n  # Ensure requests for pagespeed optimized resources go to the pagespeed handler\n  # and no extraneous headers get set.\n  location ~ \"\\.pagespeed\\.([a-z]\\.)?[a-z]{2}\\.[^.]{10}\\.[^.]+\" {\n  add_header \"\" \"\";\n  }\n  location ~ \"^/pagespeed_static/\" { }\n  location ~ \"^/ngx_pagespeed_beacon$\" { }\n\n  # Resources from these domains are candidates for optimization\n  pagespeed Domain {{this.SERVER_NAME}};\n  pagespeed MapOriginDomain {{proto}}://127.0.0.1:{{profile_port}} {{proto}}://{{this.SERVER_NAME}};\n  {% \t\t\t\t\t\tfor ows in origins %}\n  {% \t\t\t\t\t\t\tset host = ows|replace(\"://\",\"-\")|replace(\":\",\"-\")|replace(\"/\",\"-\") %}\n  pagespeed MapProxyDomain {{proto}}://{{this.SERVER_NAME}}/rev-ps-{{host}} {{ows}};\n  {% \t\t\t\t\t\tendfor %}\n\n  # Faster locking means faster response time, see:\n  # http://www.webperformance.com/load-testing/blog/2012/12/google-pagespeed-performance-with-memory-locking/\n  pagespeed SharedMemoryLocks On;\n\n  # Allow cacheable, but modified HTML to be cached by Varnish\n  # See: https://developers.google.com/speed/pagespeed/module/downstream-caching\n  pagespeed DownstreamCachePurgeLocationPrefix {{proto}}://{{this.SERVER_NAME}};\n  pagespeed DownstreamCachePurgeMethod PURGE;\n  pagespeed DownstreamCacheRewrittenPercentageThreshold 95;\n\n  # Disable all filters and start from scratch\n  pagespeed RewriteLevel PassThrough;\n\n  {% \t\t\t\t\t\tif this.DOMAIN_SHARDS_COUNT %}\n  # Apply domain mapping rules to all resources, even if not optimized by PS, to shard everything\n  pagespeed EnableFilters rewrite_domains;\n  pagespeed ShardDomain {{this.SERVER_NAME}} {% for shard in range(this.DOMAIN_SHARDS_COUNT) %}s{{shard}}-{{this.SERVER_NAME}},{% endfor %};\n  {% \t\t\t\t\t\tendif %}\n\n  {% \t\t\t\t\t\tif this.ENABLE_OPTIMIZATION %}\n  # Allow optimization of JS-referenced resources\n  pagespeed InPlaceResourceOptimization on;\n\n  # Turn on browser-specific optimizations\n  pagespeed EnableFilters in_place_optimize_for_browser;\n\n  # Customer profile settings\n  {{ \t\t\t\t\t\t\t_co_profile_factory(co_profiles_mod, co_profiles, p) }}\n  {% \t\t\t\t\t\tendif %}\n  {% \t\t\t\t\telse %}{# enable_pagespeed #}\n  # Disable pagespeed\n  pagespeed off;\n  {% \t\t\t\t\tendif %}{# enable_pagespeed #}\n\n  # Optional customizations after generic options\n  {{ \t\t\t\t\tcaller(False, is_https) }}\n  {{ \t\t\t\t\tthis.CUSTOM_WEBSERVER_CODE_AFTER|extract_custom_webserver_code(\"NGINX\") }}\n  # End optional customizations after generic options\n\n  {%                  if this.SERVER_NAME != this.ORIGIN_SERVER_NAME %}\n    # Make sure absolute URLs pointing to the origin go through us instead\n    {%                      if (this.ENABLE_HTTP and this.ENABLE_HTTPS) and not is_https %}{# both supported; must prevent conversion from secure to unsecure #}\n      # HTTPS links are turned into absolute ones to our own server\n      subs_filter ([\\\"'])https://{{this.ORIGIN_SERVER_NAME}} $1https://{{this.SERVER_NAME}} r;\n      # HTTP links are turned into relative ones\n      subs_filter ([\\\"'])(http:)?//{{this.ORIGIN_SERVER_NAME}} $1 r;\n    {%                      else %}{# only HTTP or only HTTPS #}\n      subs_filter ([\\\"'])(https?:)?//{{this.ORIGIN_SERVER_NAME}} $1 r;\n    {%                      endif %}{# HTTP and/or HTTPS #}\n  {%                  endif %}{# this.SERVER_NAME != this.ORIGIN_SERVER_NAME #}\n\n  {{ \t\t\t\t\tthird_party_mod.replace_urls(this, proto, this.ENABLE_OPTIMIZATION) }}\n\n  {%      \t\t\tif this.REV_RUM_BEACON_URL %}\n  {%          \t\t\tset rum_beacon_url = this.REV_RUM_BEACON_URL if this.REV_RUM_BEACON_URL|truncate(4,True,\"\") == \"http\" else proto + \"://\" + this.REV_RUM_BEACON_URL %}\n  # RUM beacon\n  subs_filter </head> \"<script src='/rev-diablo/js/boomerang-rev.min.js'></script><script>BOOMR.init({RT:{cookie:'REV-RT', strict_referrer: false}, beacon_url: '{{rum_beacon_url}}'}); BOOMR.addVar('user_ip', '$http_x_forwarded_for');</script></head>\" r;\n\n  pagespeed Disallow \"{{proto}}://{{this.SERVER_NAME}}/rev-diablo/*\";\n  {%      \t\t\tendif %}\n  }\n  {% \t\t\t\tendfor %}\n  {% \t\t\tendif %}\n  {% \t\t\tset is_https = True %}\n  {% \t\tendfor %}\n{%- endmacro %}\n", 
          "co/standard_profiles/default_customer_profiles.jinja": "{% macro _base_filters(this) -%}\n    # Begin base filters\n    pagespeed EnableFilters add_head;\n    pagespeed EnableFilters inline_import_to_link;\n    pagespeed EnableFilters insert_ga;\n    pagespeed EnableFilters remove_comments;\n    pagespeed EnableFilters collapse_whitespace;\n    pagespeed EnableFilters extend_cache;\n    pagespeed EnableFilters extend_cache_pdfs;\n    pagespeed EnableFilters remove_quotes;\n    # We already use Boomerang, don't need this\n    #pagespeed EnableFilters add_instrumentation;\n    pagespeed EnableFilters convert_meta_tags;\n    pagespeed EnableFilters insert_dns_prefetch;\n\n    # Allow AJAX loaded resources to be optimized\n    # See: https://developers.google.com/speed/pagespeed/module/system#ipro\n    pagespeed InPlaceResourceOptimization on;\n\n    # Filters to lower bandwidth usage\n    pagespeed EnableFilters combine_heads;\n    pagespeed EnableFilters elide_attributes;\n    pagespeed EnableFilters trim_urls;\n    # End base filters\n{%- endmacro %}\n\n{% macro profile_selection(this) -%}\n{% if this.REV_OPTIMIZATION_LEVEL == \"adaptive\" -%}\n    # TODO: implement\n{% endif %}\n    # Always use profile 0 by default\n    # TODO: RevProfilesAddSelectionRule 0 1==1\n{%- endmacro %}\n\n{% macro _optimize_up_to_level(level) -%}\n{% if level == \"low\" %}\n{% set lvl = 1 %}\n{% elif level == \"medium\" %}\n{% set lvl = 2 %}\n{% elif level == \"high\" %}\n{% set lvl = 3 %}\n{% else %}\n{% set lvl = 0 %}\n{% endif %}\n{% if lvl >= 1 %}\n{{ caller(\"low\") }}\n{% endif %}\n{% if lvl >= 2 %}\n{{ caller(\"medium\") }}\n{% endif %}\n{% if lvl == 3 %}\n{{ caller(\"high\") }}\n{% endif %}\n{%- endmacro %}\n\n{% macro _custom_js_optimizations(js_level) -%}\n{% call(level) _optimize_up_to_level(js_level) %}\n{% if level == \"low\" -%}\n    # Begin custom JS optimizations - low\n# See this bug: https://code.google.com/p/modpagespeed/issues/detail?id=821\n#<pagespeed If spdy>;\n#    pagespeed EnableFilters outline_javascript;\n#</ModPagespeedIf>\n    # End custom JS optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom JS optimizations - medium\n    pagespeed EnableFilters extend_cache_scripts;\n    pagespeed EnableFilters rewrite_javascript;\n    #pagespeed UseExperimentalJsMinifier On;\n# TODO: <pagespeed If !spdy>;\n# TODO:     pagespeed EnableFilters inline_javascript;\n# TODO: </ModPagespeedIf>\n    # End custom JS optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom JS optimizations - high\n    pagespeed EnableFilters defer_javascript;\n    pagespeed EnableFilters combine_javascript;\n    # Don't let PageSpeed externalize JS - all JS files must pass through the BP\n    #pagespeed EnableFilters canonicalize_javascript_libraries;\n    pagespeed EnableFilters make_google_analytics_async;\n    # End custom JS optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_css_optimizations(css_level) -%}\n{% call(level) _optimize_up_to_level(css_level) %}\n{% if level == \"low\" -%}\n    # Begin custom CSS optimizations - low\n    pagespeed EnableFilters move_css_above_scripts;\n    pagespeed EnableFilters move_css_to_head;\n# See this bug: https://code.google.com/p/modpagespeed/issues/detail?id=821\n#<pagespeed If spdy>;\n#    pagespeed EnableFilters outline_css;\n#</ModPagespeedIf>\n    pagespeed EnableFilters rewrite_style_attributes;\n    # End custom CSS optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom CSS optimizations - medium\n    pagespeed EnableFilters extend_cache_css;\n    pagespeed EnableFilters combine_css;\n# TODO: <pagespeed If !spdy>;\n# TODO:     pagespeed EnableFilters inline_css;\n# TODO: </ModPagespeedIf>\n    pagespeed EnableFilters flatten_css_imports;\n    pagespeed EnableFilters rewrite_css;\n    pagespeed EnableFilters fallback_rewrite_css_urls;\n    pagespeed EnableFilters rewrite_style_attributes_with_url;\n    # End custom CSS optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom CSS optimizations - high\n# TODO: <pagespeed If !spdy>;\n# TODO:     pagespeed EnableFilters inline_google_font_css;\n# TODO: </ModPagespeedIf>\n    pagespeed EnableFilters prioritize_critical_css;\n    # End custom CSS optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_img_optimizations(img_level) -%}\n{% call(level) _optimize_up_to_level(img_level) %}\n{% if level == \"low\" -%}\n    # Begin custom IMG optimizations - low\n    pagespeed EnableFilters insert_image_dimensions;\n    pagespeed EnableFilters dedup_inlined_images;\n    # End custom IMG optimizations - low\n{% elif level == \"medium\" %}\n    # Begin custom IMG optimizations - medium\n    pagespeed EnableFilters sprite_images;\n    pagespeed EnableFilters extend_cache_images;\n    pagespeed EnableFilters rewrite_images;\n    #pagespeed EnableFilters convert_jpeg_to_progressive;\n# TODO: <pagespeed If !spdy>;\n# TODO:     pagespeed EnableFilters inline_images;\n# TODO: </ModPagespeedIf>\n    pagespeed EnableFilters recompress_images;\n    pagespeed EnableFilters recompress_jpeg;\n    pagespeed EnableFilters recompress_png;\n    pagespeed EnableFilters recompress_webp;\n    pagespeed EnableFilters convert_gif_to_png;\n    pagespeed EnableFilters strip_image_color_profile;\n    pagespeed EnableFilters strip_image_meta_data;\n    pagespeed EnableFilters resize_images;\n    pagespeed EnableFilters resize_rendered_image_dimensions;\n    pagespeed EnableFilters lazyload_images;\n    pagespeed CriticalImagesBeaconEnabled Off;\n\n    pagespeed ImageRecompressionQuality 70;\n    # End custom IMG optimizations - medium\n{% elif level == \"high\" %}\n    # Begin custom IMG optimizations - high\n    pagespeed EnableFilters convert_png_to_jpeg;\n    # webp conversion is costly and not all browsers support webp\n    #pagespeed EnableFilters convert_jpeg_to_webp;\n    #pagespeed EnableFilters inline_preview_images;\n    pagespeed EnableFilters resize_mobile_images;\n    # End custom IMG optimizations - high\n{% endif %}\n{% endcall %}\n{%- endmacro %}\n\n{% macro _custom_optimizations(this) -%}\n    # Optimization level: Custom\n    {{_custom_js_optimizations(this.REV_CUSTOM_JS_LEVEL)}}\n    {{_custom_css_optimizations(this.REV_CUSTOM_CSS_LEVEL)}}\n    {{_custom_img_optimizations(this.REV_CUSTOM_IMG_LEVEL)}}\n    # End optimization level: Custom\n{%- endmacro %}\n\n{% macro _level_optimizations(level) -%}\n    # Optimization level: {{level}}\n    {{_custom_js_optimizations(level)}}\n    {{_custom_css_optimizations(level)}}\n    {{_custom_img_optimizations(level)}}\n    # End optimization level: {{level}}\n{%- endmacro %}\n\n{% macro profile0(this) -%}\n    {{_base_filters()}}\n{% if this.REV_OPTIMIZATION_LEVEL == \"min\" %}\n    {{_level_optimizations(\"low\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"med\" %}\n    {{_level_optimizations(\"medium\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"max\" %}\n    {{_level_optimizations(\"high\")}}\n{% elif this.REV_OPTIMIZATION_LEVEL == \"custom\" %}\n    {{_custom_optimizations(this)}}\n{% else %}{# including \"adaptive\", where profile0 means \"don't optimize\" #}\n    # Optimizations turned off\n{% endif %}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile1(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"low\")}}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile2(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"medium\")}}\n    # End optimizations\n{%- endmacro %}\n\n{% macro profile3(this) -%}\n    {{_base_filters()}}\n    {{_level_optimizations(\"high\")}}\n    # End optimizations\n{%- endmacro %}\n", 
          "common/ssl.jinja": "{% set ssl_ciphers = \"\\\"EECDH+ECDSA+AESGCM EECDH+aRSA+AESGCM EECDH+ECDSA+SHA384 EECDH+ECDSA+SHA256 EECDH+aRSA+SHA384 EECDH+aRSA+SHA256 EECDH+aRSA+RC4 EECDH EDH+aRSA 3DES RC4 !aNULL !eNULL !LOW !MD5 !EXP !PSK !SRP !DSS +3DES 3DES +RC4 RC4\\\"\" %}\n{% set site_cert_dir = \"/opt/revsw-config/apache/\" + GLOBAL_SITE_NAME + \"/certs\" %}\n\n{% macro _do_setup_no_proxy(this, cert_dir) %}\n    # Disable SSLv2/3 because of SNI, which requires TLS\n    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    # No need to mitigate CRIME attack - SSL compression is off by default\n    # Use stronger ciphers, which may mitigate BEAST attacks\n    ssl_ciphers {{ssl_ciphers}};\n    ssl_prefer_server_ciphers on;\n    ssl_session_cache shared:SSL:10m;\n    ssl_certificate {{cert_dir}}/server-chained.crt;\n    ssl_certificate_key {{cert_dir}}/server.key;\n{%- endmacro %}\n\n{% macro _do_setup_proxy_only(this, cert_dir) %}\n    # Disable SSLv2/3 because of SNI, which requires TLS\n    proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2;\n    # No need to mitigate CRIME attack - SSL compression is off by default\n    # Use stronger ciphers, which may mitigate BEAST attacks\n    proxy_ssl_ciphers {{ssl_ciphers}};\n    proxy_ssl_certificate {{cert_dir}}/server-chained.crt;\n    proxy_ssl_certificate_key {{cert_dir}}/server.key;\n    proxy_ssl_verify off;\n{%- endmacro %}\n\n{% macro setup_no_proxy(this) %}\n    # Begin SSL setup (no proxy)\n{{  _do_setup_no_proxy(this, site_cert_dir) }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup_proxy_only(this) %}\n    # Begin SSL setup (proxy-only)\n{{  _do_setup_proxy_only(this, site_cert_dir) }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup(this) %}\n    # Begin SSL setup\n{{  _do_setup_no_proxy(this, site_cert_dir) }}\n{{  _do_setup_proxy_only(this, site_cert_dir) }}\n    # End SSL setup\n{%- endmacro %}\n\n{% macro setup_bp_co(this) %}\n    # Begin SSL setup\n{{  _do_setup_no_proxy(this, \"/opt/revsw-config/apache/co-certs\") }}\n{{  _do_setup_proxy_only(this, \"/opt/revsw-config/apache/co-certs\") }}\n    # End SSL setup\n{%- endmacro %}\n", 
          "main.jinja": "\n{% import \"co/standard_profiles/default_customer_profiles.jinja\" as co_profiles_mod %}\n{% import \"co/co.jinja\" as co_mod %}\n\n{% call(before, is_https) co_mod.setup(co, co_profiles_mod, co_profiles) %}\n{% endcall %}\n", 
          "common/third_party.jinja": "{% macro replace_urls(this, proto, has_pagespeed) %}\n{% \tset preserve_https = this.ENABLE_HTTP and this.ENABLE_HTTPS %}\n{% \tif preserve_https %}\n{%  \tset https_proto = \"https\" %}\n{%  \tset https_url_prefix = \"https://\" + this.SERVER_NAME if proto != \"https\" else \"\" %}\n{% \telse %}\n{%  \tset https_proto = proto %}\n{%  \tset https_url_prefix = \"\" %}\n{% \tendif %}\n\n{% \tif this.DOMAINS_TO_PROXY_HTTP %}\n{%  \tfor host in this.DOMAINS_TO_PROXY_HTTP %}\n{% \t\t\tif has_pagespeed %}\n    # TODO: ModPagespeedMapProxyDomain {{proto}}://{{this.SERVER_NAME}}/rev-ps-http-{{host}} http://{{host}}\n{%  \t\tendif %}\n    # Make sure absolute URLs pointing to the server go through us instead\n    subs_filter ([\\\"'])(http:)?//{{host}} $1/rev-third-party-http/{{host}} r;\n{%  \tendfor %}\n{% \tendif %}\n\n{% \tif this.DOMAINS_TO_PROXY_HTTPS %}\n{%  \tfor host in this.DOMAINS_TO_PROXY_HTTPS %}\n{% \t\t\tif has_pagespeed %}\n    # TODO: ModPagespeedMapProxyDomain {{https_proto}}://{{this.SERVER_NAME}}/rev-ps-https-{{host}} https://{{host}}\n{%  \t\tendif %}\n    # Make sure absolute URLs pointing to the server go through us instead\n    subs_filter ([\\\"'])(https:)?//{{host}} $1{{https_url_prefix}}/rev-third-party-https/{{host}} r;\n{%  \tendfor %}\n{% \tendif %}\n\n{% \tif this.ENABLE_JS_SUBSTITUTE %}\n    # JS substitute must be the first script we load\n    subs_filter <head([^>]*)> \"<head$1><script>var revJSSubst={nshards:{{this.DOMAIN_SHARDS_COUNT}},domains:{\n{%- \tset first=True -%}\n{%- \tfor host in this.DOMAINS_TO_OPTIMIZE_HTTP %}{{ \"\" if first else \",\" }}'{{\"http://\" if not host in this.DOMAINS_TO_OPTIMIZE_HTTPS else \"\"}}{{host}}':1{% set first=False %}{% endfor -%}\n{%- \tset first=False if this.DOMAINS_TO_OPTIMIZE_HTTP else True -%}\n{%- \tfor host in this.DOMAINS_TO_OPTIMIZE_HTTPS %}{% if not host in this.DOMAINS_TO_OPTIMIZE_HTTP %}{{ \"\" if first else \",\" }}'https://{{host}}':1{% set first=False %}{% endif %}{% endfor -%}\n    },keep_https:{{ \"1\" if preserve_https else \"0\" }}};</script><script src='/rev-js/rev-js-substitute.min.js'></script>\" r;\n{% \t\tif has_pagespeed %}\n    pagespeed Disallow \"{{proto}}://{{this.SERVER_NAME}}/rev-js/*\";\n{%  \tendif %}\n{% \tendif %}{# ENABLE_JS_SUBSTITUTE #}\n\n{% endmacro %}"
        }
      }, 
      "type": "config", 
      "site_name": "generic-domain_1234", 
      "config_vars": {
        "co_profiles": {
          "REV_OPTIMIZATION_LEVEL": "custom", 
          "REV_CUSTOM_IMG_LEVEL": "medium", 
          "VERSION": 2, 
          "REV_CUSTOM_CSS_LEVEL": "medium", 
          "REV_CUSTOM_JS_LEVEL": "medium"
        }, 
        "co": {
          "REV_PROFILES_BASE_PORT_HTTP": 18000, 
          "ENABLE_HTML_SUBSTITUTE": false, 
          "DOMAINS_TO_OPTIMIZE_HTTPS": [], 
          "PROXY_TIMEOUT": 5, 
          "ENABLE_HTTPS": true, 
          "ORIGIN_REUSE_CONNS": true, 
          "ENABLE_OPTIMIZATION": true, 
          "SERVER_NAME": "generic-domain.1234", 
          "CUSTOM_WEBSERVER_CODE_AFTER": "", 
          "REV_RUM_BEACON_URL": "http://rum-02-prod-sjc.revsw.net/service", 
          "REV_PROFILES_COUNT": 1, 
          "REV_PROFILES_BASE_PORT_HTTPS": 19000, 
          "DOMAINS_TO_PROXY_HTTP": [], 
          "LISTEN_REV_PROFILES_BASE_PORT_HTTPS": false, 
          "ssl": {}, 
          "VERSION": 14, 
          "ORIGIN_SERVER_NAME": "ows-generic-domain.1234", 
          "ENABLE_JS_SUBSTITUTE": false, 
          "DOMAINS_TO_OPTIMIZE_HTTP": [], 
          "LISTEN_REV_PROFILES_BASE_PORT_HTTP": false, 
          "ORIGIN_IDLE_TIMEOUT": 80, 
          "ENABLE_PROXY_BUFFERING": false, 
          "ENABLE_HTTP": true, 
          "ORIGIN_SERVERS_HTTP": [
            "http://ows-generic-server.1234"
          ], 
          "DEBUG_MODE": false, 
          "ORIGIN_REQUEST_HEADERS": false, 
          "ORIGIN_SERVERS_HTTPS": [
            "https://ows-generic-server.1234"
          ], 
          "DOMAIN_SHARDS_COUNT": 0, 
          "DOMAINS_TO_PROXY_HTTPS": []
        }
      }
    }
  ], 
  "version": 5, 
  "type": "apache"
}